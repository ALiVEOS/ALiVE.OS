/*%FSM<COMPILE "scriptedFSM.cfg, opcom">*/
/*%FSM<HEAD>*/
/*
item0[] = {"INIT_COMPLETE",4,218,75.000000,250.000000,175.000000,300.000000,0.000000,"INIT" \n "COMPLETE"};
item1[] = {"ANALYZE",2,250,-125.000000,875.000000,375.000000,925.000000,0.000000,"ANALYZE"};
item2[] = {"OPCOM_FEEDER",4,218,75.000000,975.000000,175.000000,1025.000000,1.000000,"OPCOM" \n "FEEDER"};
item3[] = {"ATTACK_Condition",4,218,-125.000000,975.000000,-25.000000,1025.000000,5.000000,"ATTACK" \n "Conditions"};
item4[] = {"",7,210,453.500000,1220.999878,471.500031,1229.000000,0.000000,""};
item5[] = {"",7,210,453.499969,371.000000,471.500000,379.000000,0.000000,""};
item6[] = {"DEFEND_condition",4,218,0.000000,975.000000,100.000000,1025.000000,4.000000,"DEFEND" \n "conditions"};
item7[] = {"RESERVE_conditio",4,218,150.000000,975.000000,250.000000,1025.000000,3.000000,"RESERVE" \n "conditions"};
item8[] = {"OPCOM_RECEIVER",4,218,75.000000,350.000000,175.000000,400.000000,1.000000,"OPCOM" \n "RECEIVER"};
item9[] = {"CUSTOM_condition",4,218,300.000000,975.000000,400.000000,1025.000000,2.000000,"CUSTOM" \n "conditions"};
item10[] = {"ORDER_TACOM",2,250,-125.000000,1100.000000,375.000000,1150.000000,0.000000,"ORDER" \n "TACOM"};
item11[] = {"TACOM_CONFIRM",4,218,150.000000,1200.000000,250.000000,1250.000000,0.000000,"TACOM" \n "CONFIRM"};
item12[] = {"TACOM_NOT_CONFIR",4,218,25.000000,1200.000000,125.000000,1250.000000,0.000000,"TACOM" \n "NOT CONFIRM"};
item13[] = {"",7,210,-234.000275,1221.000000,-215.999725,1229.000000,0.000000,""};
item14[] = {"_",-1,250,350.000000,1225.000000,375.000000,1250.000000,0.000000,""};
item15[] = {"",7,210,-234.000000,371.000000,-216.000000,379.000000,0.000000,""};
item16[] = {"INITIALIZE",2,250,75.000000,325.000000,175.000000,350.000000,0.000000,"INITIALIZE"};
item17[] = {"NOT_BUSY",2,250,-125.000000,1200.000000,-25.000000,1250.000000,0.000000,"NOT BUSY"};
item18[] = {"NOT_BUSY_1",2,250,275.000000,1200.000000,375.000000,1250.000000,0.000000,"NOT BUSY"};
item19[] = {"COLLECT_TO_QUEUE",2,250,200.000000,550.000000,300.000000,600.000000,0.000000,"COLLECT" \n "TO QUEUE"};
item20[] = {"ENTRIES_IN_QUEUE",4,218,200.000000,650.000000,300.000000,700.000000,2.000000,"ENTRIES" \n "IN QUEUE"};
item21[] = {"ANALYZE_Conditio",4,218,-400.000000,875.000000,-300.000000,925.000000,0.000000,"ANALYZE" \n "Conditions"};
item22[] = {"PERFORM_ANALYSIS",2,250,-400.000000,650.000000,-300.000000,700.000000,0.000000,"PERFORM" \n "ANALYSIS"};
item23[] = {"ANALYSIS_DONE",4,218,-425.000000,600.000000,-325.000000,650.000000,0.000000,"ANALYSIS" \n "DONE"};
item24[] = {"RESET",2,250,-425.000000,350.000000,-325.000000,400.000000,0.000000,"RESET"};
item25[] = {"PERFORM_CLEANUP",2,250,-400.000000,800.000000,-300.000000,850.000000,0.000000,"PERFORM" \n "CLEANUP"};
item26[] = {"CLEANUP_DONE",4,218,-400.000000,725.000000,-300.000000,775.000000,0.000000,"CLEANUP" \n "DONE"};
item27[] = {"EXIT",4,218,75.000000,1300.000000,175.000000,1350.000000,99.000000,"EXIT"};
item28[] = {"END",1,250,75.000000,1425.000000,175.000000,1475.000000,0.000000,"END"};
item29[] = {"REEINFORCE_Condi",4,218,525.000000,875.000000,625.000000,925.000000,0.000000,"REEINFORCE" \n "Conditions"};
item30[] = {"REQUEST_REEINFOR",2,250,525.000000,350.000000,625.000000,400.000000,0.000000,"REQUEST" \n "REEINFORCEMENTS"};
item31[] = {"",7,210,-371.500000,1221.000000,-353.500000,1229.000000,0.000000,""};
item32[] = {"PERFORM_POSTANAL",2,250,-425.000000,500.000000,-325.000000,550.000000,0.000000,"PERFORM" \n "POSTANALYSIS"};
item33[] = {"POST_ANALYSIS_DO",4,218,-425.000000,425.000000,-325.000000,475.000000,0.000000,"POST" \n "ANALYSIS" \n "DONE"};
item34[] = {"QRF_Conditions",4,218,650.000000,875.000000,750.000000,925.000000,0.000000,"QRF" \n "Conditions"};
item35[] = {"REQUEST_QRF",2,250,650.000000,350.000000,750.000000,400.000000,0.000000,"REQUEST" \n "QRF"};
item36[] = {"RECON_Conditions",4,218,800.000000,875.000000,900.000000,925.000000,0.000000,"RECON" \n "Conditions"};
item37[] = {"REQUEST_RECON",2,250,800.000000,350.000000,900.000000,400.000000,0.000000,"REQUEST" \n "RECON"};
item38[] = {"OCA_Conditions",4,218,950.000000,875.000000,1050.000000,925.000000,0.000000,"OCA" \n "Conditions"};
item39[] = {"REQUEST_OCA",2,250,950.000000,350.000000,1050.000000,400.000000,0.000000,"REQUEST" \n "OCA"};
item40[] = {"INIT",0,4346,-1825.000000,300.000000,-1725.000000,350.000000,0.000000,"INIT"};
item41[] = {"INIT_COMPLETE",4,218,-1825.000000,375.000000,-1725.000000,425.000000,0.000000,"INIT" \n "COMPLETE"};
item42[] = {"Start",2,250,-1825.000000,450.000000,-1725.000000,500.000000,0.000000,"Start"};
item43[] = {"Started",4,218,-1825.000000,525.000000,-1725.000000,575.000000,0.000000,"Started"};
item44[] = {"Wait_for_Data",2,250,-1825.000000,600.000000,-1725.000000,650.000000,0.000000,"Wait" \n "for" \n "Data"};
item45[] = {"Data_Received",4,218,-2000.000000,800.000000,-1900.000000,850.000000,0.000000,"Data" \n "Received"};
item46[] = {"Timeout",4,218,-1750.000000,800.000000,-1650.000000,850.000000,1.000000,"Timeout"};
item47[] = {"Process_Data",2,250,-2000.000000,875.000000,-1900.000000,925.000000,0.000000,"Process" \n "Data"};
item48[] = {"Processed",4,218,-2000.000000,950.000000,-1900.000000,1000.000000,0.000000,"Processed"};
item49[] = {"Order_TACOM_1",2,250,-2000.000000,1025.000000,-1900.000000,1075.000000,0.000000,"Order" \n "TACOM"};
item50[] = {"Analyze_Objective",2,250,-1750.000000,1175.000000,-1650.000000,1225.000000,0.000000,"Analyze" \n "Objective" \n "Occupation"};
item51[] = {"Objectives_Analy",4,218,-1750.000000,1250.000000,-1650.000000,1300.000000,1.000000,"Objectives" \n "Analyzed"};
item52[] = {"",7,210,-2279.000000,1496.000000,-2271.000000,1504.000000,0.000000,""};
item53[] = {"",7,210,-1954.000000,1496.000000,-1946.000000,1504.000000,0.000000,""};
item54[] = {"",7,210,-1704.000000,1496.000000,-1696.000000,1504.000000,0.000000,""};
item55[] = {"",7,210,-2279.000000,621.000000,-2271.000000,629.000000,0.000000,""};
item56[] = {"EXIT",4,218,-1375.000000,600.000000,-1275.000000,650.000000,100.000000,"EXIT"};
item57[] = {"END_1",1,250,-1250.000000,600.000000,-1150.000000,650.000000,0.000000,"END"};
item58[] = {"Handled",4,218,-2000.000000,1100.000000,-1900.000000,1150.000000,0.000000,"Handled"};
item59[] = {"Paused",4,218,-1600.000000,500.000000,-1500.000000,550.000000,90.000000,"Paused"};
item60[] = {"Check_For_Data_C",4,218,-1425.000000,800.000000,-1325.000000,850.000000,2.000000,"Check For" \n "Data Changes"};
item61[] = {"Handle_Changes",2,250,-1425.000000,875.000000,-1325.000000,925.000000,0.000000,"Handle" \n "Changes"};
item62[] = {"Changes_Handled",4,218,-1425.000000,950.000000,-1325.000000,1000.000000,2.000000,"Changes" \n "Handled"};
item63[] = {"",7,210,-1379.000000,1496.000000,-1371.000000,1504.000000,0.000000,""};
item64[] = {"Objectives_Left",4,218,-1600.000000,1175.000000,-1500.000000,1225.000000,10.000000,"Objectives" \n "Left"};
item65[] = {"Prepare_Internal",2,250,-1750.000000,875.000000,-1650.000000,925.000000,0.000000,"Prepare" \n "Internal" \n "Analysis"};
item66[] = {"Prepared",4,218,-1750.000000,950.000000,-1650.000000,1000.000000,1.000000,"Prepared"};
item67[] = {"Analyze_Available",2,250,-1750.000000,1025.000000,-1650.000000,1075.000000,0.000000,"Analyze" \n "Available" \n "Troops"};
item68[] = {"Prepared",4,218,-1750.000000,1100.000000,-1650.000000,1150.000000,1.000000,"Prepared"};
item69[] = {"Troops_Left",4,218,-1600.000000,1025.000000,-1500.000000,1075.000000,10.000000,"Troops" \n "Left"};
item70[] = {"Generate_Orders",2,250,-1750.000000,1325.000000,-1650.000000,1375.000000,0.000000,"Generate" \n "Orders for" \n "Evaluation"};
item71[] = {"Orders_Sent_To_T",4,218,-1750.000000,1400.000000,-1650.000000,1450.000000,1.000000,"Orders Sent" \n "To TACOM"};
item72[] = {"Reports_Left",4,218,-1600.000000,1325.000000,-1500.000000,1375.000000,10.000000,"Reports" \n "Left"};
item73[] = {"____FAKE____",9,2009390102,0.000000,0.000000,0.000000,0.000000,0.000000,"____FAKE____"};
version=1;
class LayoutItems
{
	class Item14
	{
		class ItemInfo
		{
			FontFace="Arial";
			FontHeight=10;
			lStyle=1;
		};
	};
};
link0[] = {0,16};
link1[] = {1,2};
link2[] = {1,3};
link3[] = {1,6};
link4[] = {1,7};
link5[] = {1,8};
link6[] = {1,9};
link7[] = {1,21};
link8[] = {1,27};
link9[] = {1,29};
link10[] = {1,34};
link11[] = {1,36};
link12[] = {1,38};
link13[] = {2,1};
link14[] = {3,10};
link15[] = {4,5};
link16[] = {4,27};
link17[] = {5,8};
link18[] = {6,10};
link19[] = {7,10};
link20[] = {8,19};
link21[] = {9,10};
link22[] = {10,11};
link23[] = {10,12};
link24[] = {11,18};
link25[] = {12,17};
link26[] = {13,15};
link27[] = {13,27};
link28[] = {15,8};
link29[] = {16,8};
link30[] = {17,13};
link31[] = {18,4};
link32[] = {19,8};
link33[] = {19,20};
link34[] = {20,1};
link35[] = {21,25};
link36[] = {22,23};
link37[] = {22,31};
link38[] = {23,32};
link39[] = {24,15};
link40[] = {25,26};
link41[] = {26,22};
link42[] = {27,28};
link43[] = {29,30};
link44[] = {30,5};
link45[] = {31,27};
link46[] = {32,33};
link47[] = {33,24};
link48[] = {34,35};
link49[] = {35,5};
link50[] = {36,37};
link51[] = {37,5};
link52[] = {38,39};
link53[] = {39,5};
link54[] = {40,41};
link55[] = {41,42};
link56[] = {42,43};
link57[] = {43,44};
link58[] = {44,45};
link59[] = {44,46};
link60[] = {44,56};
link61[] = {44,59};
link62[] = {44,60};
link63[] = {45,47};
link64[] = {46,65};
link65[] = {47,48};
link66[] = {48,49};
link67[] = {49,58};
link68[] = {50,51};
link69[] = {50,64};
link70[] = {51,70};
link71[] = {52,55};
link72[] = {53,52};
link73[] = {54,53};
link74[] = {55,44};
link75[] = {56,57};
link76[] = {58,53};
link77[] = {59,44};
link78[] = {60,61};
link79[] = {61,62};
link80[] = {62,63};
link81[] = {63,54};
link82[] = {64,50};
link83[] = {65,66};
link84[] = {66,67};
link85[] = {67,68};
link86[] = {67,69};
link87[] = {68,50};
link88[] = {69,67};
link89[] = {70,71};
link90[] = {70,72};
link91[] = {71,54};
link92[] = {72,70};
link93[] = {73,0};
globals[] = {0.000000,0,0,0,0,640,480,1,161,6316128,1,-2055.700195,-1351.489136,728.405457,42.085144,866,844,1};
window[] = {2,-1,-1,-1,-1,1316,224,2156,224,3,888};
*//*%FSM</HEAD>*/
class FSM
{
        fsmName = "opcom";
        class States
        {
                /*%FSM<STATE "ANALYZE">*/
                class ANALYZE
                {
                        name = "ANALYZE";
                        itemno = 1;
                        init = /*%FSM<STATEINIT""">*/"_OPCOM_status = ""switch"";" \n
                         "_timestamp = time;" \n
                         "" \n
                         "private [""_target"",""_targetId"",""_obj"",""_attack"",""_defend"",""_reserve"",""_custom"",""_qrf"",""_recon"",""_oca"",""_operation"",""_priorities"",""_data_operation"",""_data_value"",""_targetsWithState"",""_OPCOM_ACTION"",""_targetOccupation"",""_analyze"",""_data""];" \n
                         "" \n
                         "_busy = true;" \n
                         "" \n
                         "private _recon = nil;" \n
                         "private _oca = nil;" \n
                         "private _target = nil;" \n
                         "private _analyze = nil;" \n
                         "private _attack = nil;" \n
                         "private _defend = nil;" \n
                         "private _reserve = nil;" \n
                         "private _custom = nil;" \n
                         "" \n
                         "_data_operation = nil;" \n
                         "_data_value = nil;" \n
                         "" \n
                         "if (count _OPCOM_QUEUE > 0) then {" \n
                         "    _OPCOM_ACTION = _OPCOM_QUEUE deleteat 0;" \n
                         "};" \n
                         "" \n
                         "_timeout = isnil ""_OPCOM_ACTION"" && { (time - _lastAnalyze) >= _cycleTime };" \n
                         "if (_timeout) then {" \n
                         "    _OPCOM_ACTION = [""analyze"",nil];" \n
                         "};" \n
                         "" \n
                         "//start operating if data was received" \n
                         "if !(isnil ""_OPCOM_ACTION"") then {" \n
                         "    _DATA_OPERATION = _OPCOM_ACTION select 0;" \n
                         "    _DATA_VALUE = _OPCOM_ACTION select 1;" \n
                         "    _OPCOM_ACTION = nil;" \n
                         "" \n
                         "    switch (_DATA_OPERATION) do {" \n
                         "" \n
                         "        case (""init"") : {" \n
                         "            if (_debug) then {" \n
                         "                [_OPCOM_HANDLER,""OPCOM_monitor"",true] call AliVE_fnc_OPCOM;" \n
                         "            };" \n
                         "" \n
                         "            _OPCOM_DATA= [""analyze"",nil];" \n
                         "" \n
                         "            if (_debug) then {" \n
                         "                [""OPCOM initialized, %1!"",_DATA_VALUE] call ALIVE_fnc_dumpR;" \n
                         "            };" \n
                         "" \n
                         "            _busy = false;" \n
                         "        };" \n
                         "" \n
                         "        case (""analyze"") : {" \n
                         "            // Check TACOMs Data value (starting attack if you pass nil to it, see below)" \n
                         "            if (!isnil ""_DATA_VALUE"") then {" \n
                         "                switch (_DATA_VALUE) do {" \n
                         "                    case (""no groups available"") : {" \n
                         "" \n
                         "                    };" \n
                         "                    case (""analysis""): {" \n
                         "                        _analyze = ""analysis"";" \n
                         "                    };" \n
                         "                    default {};" \n
                         "                };" \n
                         "            };" \n
                         "" \n
                         "            // Analyze ClusterOccupation" \n
                         "            _targetOccupation = [_OPCOM_HANDLER,""clusteroccupation"",[]] call ALiVE_fnc_HashGet;" \n
                         "            if ((count _targetOccupation > 0 && { time - (_targetOccupation select 4) > _cycleTime }) || { count _targetOccupation == 0 }) then {" \n
                         "                _analyze = ""analysis"";" \n
                         "            };" \n
                         "" \n
                         "            // Exit if analysis should happen" \n
                         "            if (!isnil ""_analyze"") exitwith {" \n
                         "                _busy = false;" \n
                         "            };" \n
                         "" \n
                         "            // Exit if reeinforcements need to be requested" \n
                         "            if (!isnil ""_reinforce"") exitwith {" \n
                         "                _busy = false;" \n
                         "            };" \n
                         "" \n
                         "            _targetOccupation params [""_targetsTaken"",""_targetsAttacked"",""_targetsTakenEnemy"",""_targetsAttackedEnemy""];" \n
                         "" \n
                         "            private _un = [];" \n
                         "            private _at = [];" \n
                         "            private _def = [];" \n
                         "            private _res = [];" \n
                         "            private _idl = [];" \n
                         "" \n
                         "            private _active = 0;" \n
                         "" \n
                         "            {" \n
                         "                private _state = _x select 2 select 5;" \n
                         "" \n
                         "                switch (_state) do {" \n
                         "                    case (""unassigned"") :   { _un pushback _x };" \n
                         "                    case (""attack"") :       { _at pushback _x };" \n
                         "                    case (""defend"") :       { _def pushback _x };" \n
                         "                    case (""reserve"") :      { _res pushback _x };" \n
                         "                    case (""idle"") :         { _idl pushback _x };" \n
                         "                };" \n
                         "" \n
                         "                if (_state in [""attacking"",""defending""]) then {" \n
                         "                    _active = _active + 1;" \n
                         "                };" \n
                         "            } foreach _objectives;" \n
                         "" \n
                         "            // Analyze Results - prepare orders" \n
                         "" \n
                         "            switch (_controltype) do {" \n
                         "                case (""invasion"") : {" \n
                         "                    _priorities = [" \n
                         "                        [(count _res > 0),_targetsTaken,""reserve""]," \n
                         "                        [(count _un > 0),[],""unassigned""]," \n
                         "                        [(count _at > 0) && (_active <= _simultanObjectives),_targetsTakenEnemy,""attack""]," \n
                         "                        [(count _def > 0),_targetsAttacked,""defend""]" \n
                         "                    ];" \n
                         "                };" \n
                         "                case (""occupation"") : {" \n
                         "                    _priorities = [" \n
                         "                        [(count _res > 0),_targetsTaken,""reserve""]," \n
                         "                        [(count _def > 0),_targetsAttacked,""defend""]," \n
                         "                        [(count _at > 0),_targetsTakenEnemy,""attack""]," \n
                         "                        [(count _un > 0),[],""unassigned""]" \n
                         "                    ];" \n
                         "                };" \n
                         "            };" \n
                         "" \n
                         "            private ""_targetsWithState"";" \n
                         "            {" \n
                         "                if (_x select 0) exitwith {" \n
                         "                    _targetsWithState = (_x select 2);" \n
                         "                };" \n
                         "            } foreach _priorities;" \n
                         "" \n
                         "            //Select orders and execute" \n
                         "            if !(isnil ""_targetsWithState"") then {" \n
                         "                private _orders = [_OPCOM_HANDLER,""selectordersbystate"",_targetsWithState] call ALiVE_fnc_OPCOM;" \n
                         "" \n
                         "                if !(isnil ""_orders"") then {" \n
                         "                    private [""_o""];" \n
                         "" \n
                         "                    _o = _orders select 1;" \n
                         "                    _operation = [_o,""opcom_orders""] call AliVE_fnc_HashGet;" \n
                         "" \n
                         "                    switch (_operation) do {" \n
                         "                        case (""attack"") : {" \n
                         "                            _attack = _o;" \n
                         "                        };" \n
                         "                        case (""defend"") : {" \n
                         "                            _defend = _o;" \n
                         "                        };" \n
                         "                        case (""reserve"") : {" \n
                         "                            _reserve = _o;" \n
                         "                        };" \n
                         "                    };" \n
                         "" \n
                         "                    if (_debug) then {" \n
                         "                        [" \n
                         "                            ""OPCOM orders TACOM to %1 target %2""," \n
                         "                            [_o,""opcom_orders""] call AliVE_fnc_HashGet," \n
                         "                            [_o,""objectiveID""] call AliVE_fnc_HashGet" \n
                         "                        ] call ALIVE_fnc_dumpR;" \n
                         "                    };" \n
                         "                } else {" \n
                         "                    _busy = false;" \n
                         "                };" \n
                         "            } else {" \n
                         "                _busy = false;" \n
                         "            };" \n
                         "        };" \n
                         "" \n
                         "        //Handle TACOM confirmation by state" \n
                         "        case (""confirmed"") : {" \n
                         "            _confirmed = _DATA_VALUE select 0;" \n
                         "            _information = _DATA_VALUE select 1;" \n
                         "" \n
                         "            _target = _information select 0;" \n
                         "            _return = _information select 1;" \n
                         "" \n
                         "            _faction = selectRandom _factions;" \n
                         "            _enemySide = selectRandom _sidesEnemy;" \n
                         "" \n
                         "            _operation = [_target,""opcom_orders""] call AliVE_fnc_HashGet;" \n
                         "            _pos = [_target,""center""] call AliVE_fnc_HashGet;" \n
                         "            _targetId = [_target,""objectiveID""] call AliVE_fnc_HashGet;" \n
                         "" \n
                         "            if (_confirmed) then {" \n
                         "                switch (_operation) do {" \n
                         "                    case (""attack"") : {" \n
                         "                        [_target,""opcom_state"",""attacking""] call AliVE_fnc_HashSet;" \n
                         "" \n
                         "                        if ([_side,[""attacking""]] call ALIVE_fnc_OPCOMgetHighestPrioObjective == _targetId) then {" \n
                         "                            _targets = [_pos, 300, [_enemySide,""entity""],true] call ALIVE_fnc_getNearProfiles;" \n
                         "                            [_side,_faction,""CaptureObjective"",_targets,""OPCOM"",true] call ALiVE_fnc_taskRequest;" \n
                         "                        };" \n
                         "" \n
                         "                        //Assist TACOM by sending air recon after TACOMs attack confirmation" \n
                         "                        _OPCOM_DATA = [""RECON"",[[_target,""objectiveID"",""""] call AliVE_fnc_HashGet]];" \n
                         "                    };" \n
                         "                    case (""defend"") : {" \n
                         "                        [_target,""opcom_state"",""defending""] call AliVE_fnc_HashSet;" \n
                         "" \n
                         "                        //Trigger new OPCOM analysis after TACOM confirmation including TACOMs answer" \n
                         "                        _OPCOM_DATA = [""analyze"",nil];" \n
                         "                    };" \n
                         "                    case (""reserve"") : {" \n
                         "                        [_target,""opcom_state"",""reserving""] call AliVE_fnc_HashSet;" \n
                         "" \n
                         "                        //Trigger new OPCOM analysis after TACOM confirmation including TACOMs answer" \n
                         "                        _OPCOM_DATA = [""analyze"",nil];" \n
                         "                    };" \n
                         "                    default {" \n
                         "                        //Trigger new OPCOM analysis after TACOM confirmation including TACOMs answer" \n
                         "                        _OPCOM_DATA = [""analyze"",nil];" \n
                         "                    };" \n
                         "                };" \n
                         "" \n
                         "                if (_debug) then {" \n
                         "                    [" \n
                         "                        ""TACOM message received: %1 %2! Details: %3!""," \n
                         "                        [_target,""opcom_state""] call AliVE_fnc_HashGet," \n
                         "                        [_target,""objectiveID""] call AliVE_fnc_HashGet," \n
                         "                        _return" \n
                         "                    ] call ALIVE_fnc_dumpR;" \n
                         "                };" \n
                         "" \n
                         "            }  else {" \n
                         "                [_target,""opcom_orders"",""none""] call ALiVE_fnc_HashSet;" \n
                         "" \n
                         "                if (_debug) then {" \n
                         "                    [""TACOM message received: %1"",_return] call ALIVE_fnc_dumpR;" \n
                         "                };" \n
                         "" \n
                         "            };" \n
                         "" \n
                         "            _busy = false;" \n
                         "        };" \n
                         "" \n
                         "        case (""QRF"") : {" \n
                         "            _target = _DATA_VALUE select 0;" \n
                         "" \n
                         "            if (_debug) then {" \n
                         "                [""OPCOM retrieved request for QRF on %1!"",_target] call ALIVE_fnc_dumpR;" \n
                         "            };" \n
                         "" \n
                         "            _qrf = [""air"",_target];" \n
                         "        };" \n
                         "" \n
                         "        case (""RECON"") : {" \n
                         "            _target = _DATA_VALUE select 0;" \n
                         "" \n
                         "            if (_debug) then {" \n
                         "                [""OPCOM retrieved request for RECON on %1!"",_target] call ALIVE_fnc_dumpR;" \n
                         "            };" \n
                         "" \n
                         "            _recon = [""air"",_target];" \n
                         "        };" \n
                         "" \n
                         "        case (""OCA"") : {" \n
                         "            _target = _DATA_VALUE select 0;" \n
                         "" \n
                         "            if (_debug) then {" \n
                         "                [""OPCOM retrieved request for OCA  on %1!"",_target] call ALIVE_fnc_dumpR;" \n
                         "            };" \n
                         "" \n
                         "            _oca = [""air"",_target];" \n
                         "        };" \n
                         "" \n
                         "        default {" \n
                         "" \n
                         "        };" \n
                         "" \n
                         "    };" \n
                         "" \n
                         "};" \n
                         "" \n
                         "_lastAnalyze = time;" \n
                         ""/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "EXIT">*/
                                class EXIT
                                {
                                        itemno = 27;
                                        priority = 99.000000;
                                        to="END";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"_exitFSM"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "ATTACK_Condition">*/
                                class ATTACK_Condition
                                {
                                        itemno = 3;
                                        priority = 5.000000;
                                        to="ORDER_TACOM";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"!(isnil ""_attack"");"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "DEFEND_condition">*/
                                class DEFEND_condition
                                {
                                        itemno = 6;
                                        priority = 4.000000;
                                        to="ORDER_TACOM";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"!(isnil ""_defend"");"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "RESERVE_conditio">*/
                                class RESERVE_conditio
                                {
                                        itemno = 7;
                                        priority = 3.000000;
                                        to="ORDER_TACOM";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"!(isnil ""_reserve"");"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "CUSTOM_condition">*/
                                class CUSTOM_condition
                                {
                                        itemno = 9;
                                        priority = 2.000000;
                                        to="ORDER_TACOM";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"!(isnil ""_custom"");"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "OPCOM_FEEDER">*/
                                class OPCOM_FEEDER
                                {
                                        itemno = 2;
                                        priority = 1.000000;
                                        to="ANALYZE";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"time - _lastAnalyze > _cycleTime"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "OPCOM_RECEIVER">*/
                                class OPCOM_RECEIVER
                                {
                                        itemno = 8;
                                        priority = 1.000000;
                                        to="COLLECT_TO_QUEUE";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/"_failsafe = (time - _timestamp) > _cycleTime;" \n
                                         ""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"_OPCOM_status = ""waiting for data""; " \n
                                         "" \n
                                         "//See PreCondition and Action for _failsafe and _pause" \n
                                         "(!(isnil ""_OPCOM_DATA"") || {isnil ""_OPCOM_DATA"" && {count _OPCOM_QUEUE > 0}} || {_orderFailed} || {_failsafe}) && {!_pause};"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/"if (_dummyVal == 0) then {" \n
                                         "	[""-----------------OPCOM----- INITIAL CONDITION PARAMETERS: %1, %2, %3, %4"", !(isnil ""_OPCOM_DATA""), count _OPCOM_QUEUE > 0, _orderFailed, _failsafe] call ALiVE_fnc_Dump;" \n
                                         "	[""-----------------OPCOM----- INITIAL DATA FINAL: %1"", _OPCOM_DATA] call ALiVE_fnc_Dump;" \n
                                         "};" \n
                                         "" \n
                                         "if (_orderFailed || {_failsafe}) then {" \n
                                         "	_orderFailed = false;" \n
                                         "	_failsafe = false;" \n
                                         "	_OPCOM_DATA = [""analyze"",nil];" \n
                                         "};" \n
                                         "" \n
                                         "_busy = false;" \n
                                         "_dummyVal = _dummyVal + 1;"/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "ANALYZE_Conditio">*/
                                class ANALYZE_Conditio
                                {
                                        itemno = 21;
                                        priority = 0.000000;
                                        to="PERFORM_CLEANUP";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"!(isnil ""_analyze"");"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "REEINFORCE_Condi">*/
                                class REEINFORCE_Condi
                                {
                                        itemno = 29;
                                        priority = 0.000000;
                                        to="REQUEST_REEINFOR";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"!(isnil ""_reinforce"");"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "QRF_Conditions">*/
                                class QRF_Conditions
                                {
                                        itemno = 34;
                                        priority = 0.000000;
                                        to="REQUEST_QRF";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"!(isnil ""_qrf"");"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "RECON_Conditions">*/
                                class RECON_Conditions
                                {
                                        itemno = 36;
                                        priority = 0.000000;
                                        to="REQUEST_RECON";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"!(isnil ""_recon"");"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "OCA_Conditions">*/
                                class OCA_Conditions
                                {
                                        itemno = 38;
                                        priority = 0.000000;
                                        to="REQUEST_OCA";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"!(isnil ""_oca"");"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "ORDER_TACOM">*/
                class ORDER_TACOM
                {
                        name = "ORDER_TACOM";
                        itemno = 10;
                        init = /*%FSM<STATEINIT""">*/"_OPCOM_status = ""order"";" \n
                         "_timestamp = time;" \n
                         "" \n
                         "_operation = nil;" \n
                         "" \n
                         "//prepare transmission" \n
                         "if !(isnil ""_attack"") then {_operation = ""attack""};" \n
                         "if !(isnil ""_defend"") then {_operation = ""defend""};" \n
                         "if !(isnil ""_reserve"") then {_operation = ""reserve""};" \n
                         "if !(isnil ""_custom"") then {_operation = ""custom""};" \n
                         "" \n
                         "//transmit" \n
                         "" \n
                         "private _tacomDataQueue = _TACOM_FSM getFSMVariable [""_TACOM_QUEUE"", []];" \n
                         "" \n
                         "switch (_operation) do {" \n
                         "    case ( ""attack"") :  { _tacomDataQueue pushback [""analyze"",_attack] };" \n
                         "    case (""defend"") :   { _tacomDataQueue pushback [""analyze"",_defend] };" \n
                         "    case (""reserve"") :  { _tacomDataQueue pushback [""analyze"",_reserve] };" \n
                         "    case (""custom"") :   {};" \n
                         "    default {};" \n
                         "};"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "TACOM_NOT_CONFIR">*/
                                class TACOM_NOT_CONFIR
                                {
                                        itemno = 12;
                                        priority = 0.000000;
                                        to="NOT_BUSY";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/"_orderFailed = false; _orderFailed = (time - _timestamp) > 10;"/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"(!(isnil ""_OPCOM_DATA"") && {(_OPCOM_DATA select 0) == ""confirmed""} && {!((_OPCOM_DATA select 1) select 0)}) || {_orderFailed}"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "TACOM_CONFIRM">*/
                                class TACOM_CONFIRM
                                {
                                        itemno = 11;
                                        priority = 0.000000;
                                        to="NOT_BUSY_1";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"!(isnil ""_OPCOM_DATA"") && {(_OPCOM_DATA select 0) == ""confirmed""} && {(_OPCOM_DATA select 1) select 0};"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "INITIALIZE">*/
                class INITIALIZE
                {
                        name = "INITIALIZE";
                        itemno = 16;
                        init = /*%FSM<STATEINIT""">*/"_OPCOM_status = ""Init"";" \n
                         "" \n
                         "_OPCOM_DATA = [""init"",true];"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "OPCOM_RECEIVER">*/
                                class OPCOM_RECEIVER
                                {
                                        itemno = 8;
                                        priority = 1.000000;
                                        to="COLLECT_TO_QUEUE";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/"_failsafe = (time - _timestamp) > _cycleTime;" \n
                                         ""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"_OPCOM_status = ""waiting for data""; " \n
                                         "" \n
                                         "//See PreCondition and Action for _failsafe and _pause" \n
                                         "(!(isnil ""_OPCOM_DATA"") || {isnil ""_OPCOM_DATA"" && {count _OPCOM_QUEUE > 0}} || {_orderFailed} || {_failsafe}) && {!_pause};"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/"if (_dummyVal == 0) then {" \n
                                         "	[""-----------------OPCOM----- INITIAL CONDITION PARAMETERS: %1, %2, %3, %4"", !(isnil ""_OPCOM_DATA""), count _OPCOM_QUEUE > 0, _orderFailed, _failsafe] call ALiVE_fnc_Dump;" \n
                                         "	[""-----------------OPCOM----- INITIAL DATA FINAL: %1"", _OPCOM_DATA] call ALiVE_fnc_Dump;" \n
                                         "};" \n
                                         "" \n
                                         "if (_orderFailed || {_failsafe}) then {" \n
                                         "	_orderFailed = false;" \n
                                         "	_failsafe = false;" \n
                                         "	_OPCOM_DATA = [""analyze"",nil];" \n
                                         "};" \n
                                         "" \n
                                         "_busy = false;" \n
                                         "_dummyVal = _dummyVal + 1;"/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "NOT_BUSY">*/
                class NOT_BUSY
                {
                        name = "NOT_BUSY";
                        itemno = 17;
                        init = /*%FSM<STATEINIT""">*/"_OPCOM_status = ""reset"";" \n
                         "_timestamp = time;" \n
                         "" \n
                         "_busy = false;"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "EXIT">*/
                                class EXIT
                                {
                                        itemno = 27;
                                        priority = 99.000000;
                                        to="END";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"_exitFSM"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "OPCOM_RECEIVER">*/
                                class OPCOM_RECEIVER
                                {
                                        itemno = 8;
                                        priority = 1.000000;
                                        to="COLLECT_TO_QUEUE";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/"_failsafe = (time - _timestamp) > _cycleTime;" \n
                                         ""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"_OPCOM_status = ""waiting for data""; " \n
                                         "" \n
                                         "//See PreCondition and Action for _failsafe and _pause" \n
                                         "(!(isnil ""_OPCOM_DATA"") || {isnil ""_OPCOM_DATA"" && {count _OPCOM_QUEUE > 0}} || {_orderFailed} || {_failsafe}) && {!_pause};"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/"if (_dummyVal == 0) then {" \n
                                         "	[""-----------------OPCOM----- INITIAL CONDITION PARAMETERS: %1, %2, %3, %4"", !(isnil ""_OPCOM_DATA""), count _OPCOM_QUEUE > 0, _orderFailed, _failsafe] call ALiVE_fnc_Dump;" \n
                                         "	[""-----------------OPCOM----- INITIAL DATA FINAL: %1"", _OPCOM_DATA] call ALiVE_fnc_Dump;" \n
                                         "};" \n
                                         "" \n
                                         "if (_orderFailed || {_failsafe}) then {" \n
                                         "	_orderFailed = false;" \n
                                         "	_failsafe = false;" \n
                                         "	_OPCOM_DATA = [""analyze"",nil];" \n
                                         "};" \n
                                         "" \n
                                         "_busy = false;" \n
                                         "_dummyVal = _dummyVal + 1;"/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "NOT_BUSY_1">*/
                class NOT_BUSY_1
                {
                        name = "NOT_BUSY_1";
                        itemno = 18;
                        init = /*%FSM<STATEINIT""">*/"_OPCOM_status = ""reset"";" \n
                         "_timestamp = time;" \n
                         "" \n
                         "_busy = false;"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "EXIT">*/
                                class EXIT
                                {
                                        itemno = 27;
                                        priority = 99.000000;
                                        to="END";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"_exitFSM"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "OPCOM_RECEIVER">*/
                                class OPCOM_RECEIVER
                                {
                                        itemno = 8;
                                        priority = 1.000000;
                                        to="COLLECT_TO_QUEUE";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/"_failsafe = (time - _timestamp) > _cycleTime;" \n
                                         ""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"_OPCOM_status = ""waiting for data""; " \n
                                         "" \n
                                         "//See PreCondition and Action for _failsafe and _pause" \n
                                         "(!(isnil ""_OPCOM_DATA"") || {isnil ""_OPCOM_DATA"" && {count _OPCOM_QUEUE > 0}} || {_orderFailed} || {_failsafe}) && {!_pause};"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/"if (_dummyVal == 0) then {" \n
                                         "	[""-----------------OPCOM----- INITIAL CONDITION PARAMETERS: %1, %2, %3, %4"", !(isnil ""_OPCOM_DATA""), count _OPCOM_QUEUE > 0, _orderFailed, _failsafe] call ALiVE_fnc_Dump;" \n
                                         "	[""-----------------OPCOM----- INITIAL DATA FINAL: %1"", _OPCOM_DATA] call ALiVE_fnc_Dump;" \n
                                         "};" \n
                                         "" \n
                                         "if (_orderFailed || {_failsafe}) then {" \n
                                         "	_orderFailed = false;" \n
                                         "	_failsafe = false;" \n
                                         "	_OPCOM_DATA = [""analyze"",nil];" \n
                                         "};" \n
                                         "" \n
                                         "_busy = false;" \n
                                         "_dummyVal = _dummyVal + 1;"/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "COLLECT_TO_QUEUE">*/
                class COLLECT_TO_QUEUE
                {
                        name = "COLLECT_TO_QUEUE";
                        itemno = 19;
                        init = /*%FSM<STATEINIT""">*/"_OPCOM_status = ""collect data to queue"";" \n
                         "_timestamp = time;" \n
                         "" \n
                         "if !(isnil ""_OPCOM_DATA"") then {" \n
                         "	_OPCOM_QUEUE pushback _OPCOM_DATA;" \n
                         "	_OPCOM_DATA = nil;" \n
                         "};"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "ENTRIES_IN_QUEUE">*/
                                class ENTRIES_IN_QUEUE
                                {
                                        itemno = 20;
                                        priority = 2.000000;
                                        to="ANALYZE";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"((count _OPCOM_QUEUE > 0) || time - _lastAnalyze > _cycleTime) && ((time - _lastAnalyze > 0.5) && !(_busy))"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "OPCOM_RECEIVER">*/
                                class OPCOM_RECEIVER
                                {
                                        itemno = 8;
                                        priority = 1.000000;
                                        to="COLLECT_TO_QUEUE";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/"_failsafe = (time - _timestamp) > _cycleTime;" \n
                                         ""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"_OPCOM_status = ""waiting for data""; " \n
                                         "" \n
                                         "//See PreCondition and Action for _failsafe and _pause" \n
                                         "(!(isnil ""_OPCOM_DATA"") || {isnil ""_OPCOM_DATA"" && {count _OPCOM_QUEUE > 0}} || {_orderFailed} || {_failsafe}) && {!_pause};"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/"if (_dummyVal == 0) then {" \n
                                         "	[""-----------------OPCOM----- INITIAL CONDITION PARAMETERS: %1, %2, %3, %4"", !(isnil ""_OPCOM_DATA""), count _OPCOM_QUEUE > 0, _orderFailed, _failsafe] call ALiVE_fnc_Dump;" \n
                                         "	[""-----------------OPCOM----- INITIAL DATA FINAL: %1"", _OPCOM_DATA] call ALiVE_fnc_Dump;" \n
                                         "};" \n
                                         "" \n
                                         "if (_orderFailed || {_failsafe}) then {" \n
                                         "	_orderFailed = false;" \n
                                         "	_failsafe = false;" \n
                                         "	_OPCOM_DATA = [""analyze"",nil];" \n
                                         "};" \n
                                         "" \n
                                         "_busy = false;" \n
                                         "_dummyVal = _dummyVal + 1;"/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "PERFORM_ANALYSIS">*/
                class PERFORM_ANALYSIS
                {
                        name = "PERFORM_ANALYSIS";
                        itemno = 22;
                        init = /*%FSM<STATEINIT""">*/"private [""_clusterOccupationAnalysis"",""_troopsAnalysis"",""_enemyScan""];" \n
                         "" \n
                         "switch (_analyze) do {" \n
                         "    case (""analysis"") : {" \n
                         "        //ANALYSISDONE = false; [_OPCOM_HANDLER,_sidesFriendly,_sidesEnemy] execFSM ""\x\alive\addons\mil_opcom\analyze.fsm"";" \n
                         "        _clusterOccupationAnalysis = [_OPCOM_HANDLER,""analyzeclusteroccupation"",[_sidesFriendly,_sidesEnemy]] spawn ALiVE_fnc_OPCOM;" \n
                         "        _troopsAnalysis = [_OPCOM_HANDLER,""scantroops""] spawn ALiVE_fnc_OPCOM;" \n
                         "        _enemyScan = [_OPCOM_HANDLER,""scanFriendliesForNearEnemies""] spawn ALIVE_fnc_OPCOM;" \n
                         "	};" \n
                         "};"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "EXIT">*/
                                class EXIT
                                {
                                        itemno = 27;
                                        priority = 99.000000;
                                        to="END";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"_exitFSM"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "ANALYSIS_DONE">*/
                                class ANALYSIS_DONE
                                {
                                        itemno = 23;
                                        priority = 0.000000;
                                        to="PERFORM_POSTANAL";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"scriptdone _troopsAnalysis && " \n
                                         "scriptdone _clusterOccupationAnalysis && " \n
                                         "scriptdone _enemyScan"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "RESET">*/
                class RESET
                {
                        name = "RESET";
                        itemno = 24;
                        init = /*%FSM<STATEINIT""">*/"_OPCOM_status = ""reset"";" \n
                         "_timestamp = time;" \n
                         "" \n
                         "// debug ---------------------------------------" \n
                         "            if(_debug) then {" \n
                         "                [""OPCOM analysis finished""] call ALIVE_fnc_dump;" \n
                         "                [] call ALIVE_fnc_timer;" \n
                         "                [""---------------------""] call ALIVE_fnc_dump;" \n
                         "" \n
                         "                private [""_obj""];" \n
                         "                _obj = [_OPCOM_HANDLER,""objectives"",[]] call ALiVE_fnc_HashGet;" \n
                         "" \n
                         "                     [""ALiVE OPCOM %9 analyzed: Total of %1 targets | unassigned: %2 | assigned: %3 | completed: %4 | defending: %5 | secured: %6 | internal: %7 | others: %8""," \n
                         "                         count _obj," \n
                         "                        ({([_x,""opcom_state""] call AliVE_fnc_HashGet) == ""unassigned""} count _obj), " \n
                         "                        ({([_x,""opcom_state""] call AliVE_fnc_HashGet) == ""attacking""} count _obj)," \n
                         "                        ({([_x,""opcom_state""] call AliVE_fnc_HashGet) == ""reserving""} count _obj)," \n
                         "                        ({([_x,""opcom_state""] call AliVE_fnc_HashGet) == ""defending""} count _obj)," \n
                         "                        ({([_x,""opcom_state""] call AliVE_fnc_HashGet) == ""idle""} count _obj)," \n
                         "                        ({([_x,""opcom_state""] call AliVE_fnc_HashGet) == ""internal""} count _obj)," \n
                         "                        ({!(([_x,""opcom_state""] call AliVE_fnc_HashGet) in [""internal"",""idle"",""defending"",""reserving"",""attacking"",""unassigned""])} count _obj)," \n
                         "                        _side" \n
                         "                    ] call ALIVE_fnc_dumpR; " \n
                         "                };" \n
                         "// debug ---------------------------------------" \n
                         "" \n
                         "_OPCOM_DATA= [""analyze"",nil]; _busy = false;"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "OPCOM_RECEIVER">*/
                                class OPCOM_RECEIVER
                                {
                                        itemno = 8;
                                        priority = 1.000000;
                                        to="COLLECT_TO_QUEUE";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/"_failsafe = (time - _timestamp) > _cycleTime;" \n
                                         ""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"_OPCOM_status = ""waiting for data""; " \n
                                         "" \n
                                         "//See PreCondition and Action for _failsafe and _pause" \n
                                         "(!(isnil ""_OPCOM_DATA"") || {isnil ""_OPCOM_DATA"" && {count _OPCOM_QUEUE > 0}} || {_orderFailed} || {_failsafe}) && {!_pause};"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/"if (_dummyVal == 0) then {" \n
                                         "	[""-----------------OPCOM----- INITIAL CONDITION PARAMETERS: %1, %2, %3, %4"", !(isnil ""_OPCOM_DATA""), count _OPCOM_QUEUE > 0, _orderFailed, _failsafe] call ALiVE_fnc_Dump;" \n
                                         "	[""-----------------OPCOM----- INITIAL DATA FINAL: %1"", _OPCOM_DATA] call ALiVE_fnc_Dump;" \n
                                         "};" \n
                                         "" \n
                                         "if (_orderFailed || {_failsafe}) then {" \n
                                         "	_orderFailed = false;" \n
                                         "	_failsafe = false;" \n
                                         "	_OPCOM_DATA = [""analyze"",nil];" \n
                                         "};" \n
                                         "" \n
                                         "_busy = false;" \n
                                         "_dummyVal = _dummyVal + 1;"/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "PERFORM_CLEANUP">*/
                class PERFORM_CLEANUP
                {
                        name = "PERFORM_CLEANUP";
                        itemno = 25;
                        init = /*%FSM<STATEINIT""">*/"_OPCOM_status = ""analysis"";" \n
                         "" \n
                         "// debug ---------------------------------------" \n
                         "            if(_debug) then {" \n
                         "                [""---------------------""] call ALIVE_fnc_dump;" \n
                         "                [""OPCOM analysis started""] call ALIVE_fnc_dumpR;" \n
                         "                [true] call ALIVE_fnc_timer;" \n
                         "            };" \n
                         "// debug ---------------------------------------    " \n
                         "" \n
                         "private [""_cleanup""];" \n
                         "" \n
                         "_cleanup = [_OPCOM_HANDLER] spawn {[_this select 0,""cleanupduplicatesections""] call ALiVE_fnc_OPCOM};"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "CLEANUP_DONE">*/
                                class CLEANUP_DONE
                                {
                                        itemno = 26;
                                        priority = 0.000000;
                                        to="PERFORM_ANALYSIS";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"scriptdone _cleanup;"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "END">*/
                class END
                {
                        name = "END";
                        itemno = 28;
                        init = /*%FSM<STATEINIT""">*/"[_OPCOM_HANDLER,""OPCOM_FSM""] call ALiVE_fnc_HashRem;"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "REQUEST_REEINFOR">*/
                class REQUEST_REEINFOR
                {
                        name = "REQUEST_REEINFOR";
                        itemno = 30;
                        init = /*%FSM<STATEINIT""">*/"_OPCOM_status = ""reinforce"";" \n
                         "_timestamp = time;" \n
                         "" \n
                         "if ([""ALiVE_MIL_LOGISTICS""] call ALiVE_fnc_isModuleAvailable) then {" \n
                         "" \n
                         "    private [""_position"",""_forceMakeup"",""_forceMakeupAir"",""_event"",""_eventID"",""_base""];" \n
                         "    " \n
                         "    _base = [_OPCOM_HANDLER,""findReinforcementBase""] call ALiVE_fnc_OPCOM;" \n
                         "" \n
                         "    if (isnil ""_base"") exitwith {" \n
                         "        if (_debug) then {[""ALiVE OPCOM - Requesting reinforcments for side %1 not possible! No position secured!"",_side] call ALiVE_fnc_DumpR};" \n
                         "    };" \n
                         "    " \n
                         "    [_base,_reinforce,_factions,_side] spawn {" \n
                         "" \n
                         "        _base = _this select 0;" \n
                         "        _reinforce = _this select 1;" \n
                         "        _factions = _this select 2;" \n
                         "        _side = _this select 3;" \n
                         "        _debug = false;" \n
                         "" \n
                         "        // Reinforcement of air assets is handled by ATO" \n
                         "        _reinforce set [4,0]; // air" \n
                         "" \n
                         "        _infantry = if ((_reinforce select 0) > 8) then {8} else {_reinforce select 0};" \n
                         "        _motorized = if ((_reinforce select 1) > 5) then {5} else {_reinforce select 1};" \n
                         "        _mechanized = if ((_reinforce select 2) > 10) then {10} else {_reinforce select 2};" \n
                         "        _armoured = if (((_reinforce select 3) + (_reinforce select 6) + (_reinforce select 7)) > 10) then {10} else {((_reinforce select 3) + (_reinforce select 6) + (_reinforce select 7))};" \n
                         "        _air = if ((_reinforce select 4) > 5) then {5} else {_reinforce select 4};" \n
                         "        " \n
                         "        _position = [_base,""center""] call ALiVE_fnc_HashGet;" \n
                         "        _faction = selectRandom _factions;" \n
                         "" \n
                         "        // Calculate total amount of air vehicles that could be present" \n
                         "        _airAssets = _air + _infantry + _motorized;        " \n
                         "                            " \n
                         "        if (_airAssets > 2) then {" \n
                         "" \n
                         "            // Send regular (non-air-transported) vehicles via convoy first" \n
                         "            _forceMakeup = [" \n
                         "                0,				//infantry" \n
                         "                0,				//motorized" \n
                         "                _mechanized,	//mechanized" \n
                         "                _armoured,		//armoured" \n
                         "                0,				//planes" \n
                         "                0				//helicopters" \n
                         "            ];" \n
                         "" \n
                         "            _event = ['LOGCOM_REQUEST', [_position,_faction,_side,_forceMakeup,""STANDARD""],""OPCOM""] call ALIVE_fnc_event;" \n
                         "            _eventID = [ALIVE_eventLog, ""addEvent"",_event] call ALIVE_fnc_eventLog;            " \n
                         "" \n
                         "            // Then send air transports and reinforced air assets with a 70 seconds delay so they do not crash in each other            " \n
                         "            for ""_i"" from 1 to ceil(_airAssets / 2) do {" \n
                         "" \n
                         "                sleep 10;" \n
                         "" \n
                         "                _forceMakeup = [" \n
                         "                    if (_infantry > 2) then {_infantry = _infantry - 2; 2} else {_infantryTmp = _infantry; _infantry = 0; _infantryTmp}," \n
                         "                    if (_motorized > 2) then {_motorized = _motorized - 2; 2} else {_motorizedTmp = _motorized; _motorized = 0; _motorizedTmp}," \n
                         "                    0," \n
                         "                    0," \n
                         "                    0, // Zero since plane reinforcements are handled by ATO " \n
                         "                    0  // Zero since heli reinforcements are handled by ATO" \n
                         "                ];" \n
                         "" \n
                         "                _event = ['LOGCOM_REQUEST', [_position,_faction,_side,_forceMakeup,""STANDARD""],""OPCOM""] call ALIVE_fnc_event;" \n
                         "                _eventID = [ALIVE_eventLog, ""addEvent"",_event] call ALIVE_fnc_eventLog;" \n
                         "" \n
                         "					 if ((_air + _infantry + _motorized) == 0) exitwith {};" \n
                         "" \n
                         "                sleep 60;" \n
                         "            };" \n
                         "" \n
                         "        } else {" \n
                         "" \n
                         "            _forceMakeup = [" \n
                         "                if ((_reinforce select 0) > 10) then {10} else {_reinforce select 0}," \n
                         "                if ((_reinforce select 1) > 10) then {10} else {_reinforce select 1}," \n
                         "                if ((_reinforce select 2) > 10) then {10} else {_reinforce select 2}," \n
                         "                if (((_reinforce select 3) + (_reinforce select 6) + (_reinforce select 7)) > 10) then {10} else {((_reinforce select 3) + (_reinforce select 6) + (_reinforce select 7))}," \n
                         "                if ((_reinforce select 4) > 10) then {10} else {_reinforce select 4}," \n
                         "                if ((_reinforce select 5) > 10) then {10} else {_reinforce select 5}" \n
                         "            ];" \n
                         "" \n
                         "            _event = ['LOGCOM_REQUEST', [_position,_faction,_side,_forceMakeup,""STANDARD""],""OPCOM""] call ALIVE_fnc_event;" \n
                         "            _eventID = [ALIVE_eventLog, ""addEvent"",_event] call ALIVE_fnc_eventLog;" \n
                         "        };" \n
                         "        " \n
                         "        if (_debug) then {" \n
                         "            {" \n
                         "                private [""_typeReinf""];" \n
                         "            " \n
                         "                _typeReinf = _foreachIndex;" \n
                         "            " \n
                         "                switch (_typeReinf) do {" \n
                         "                    case 0 : {_typeReinf = ""infantry""};" \n
                         "                    case 1 : {_typeReinf = ""motorised""};" \n
                         "                    case 2 : {_typeReinf = ""mechanised""};" \n
                         "                    case 3 : {_typeReinf = ""armour""};" \n
                         "                    case 4 : {_typeReinf = ""air""};" \n
                         "                    case 5 : {_typeReinf = ""sea""};" \n
                         "                    case 6 : {_typeReinf = ""AAA""};" \n
                         "                    case 7 : {_typeReinf = ""Artillery""};" \n
                         "                };" \n
                         "            " \n
                         "                [""ALiVE OPCOM - Requesting reinforcments for side %3 %1x %2 units!"",_x,_typeReinf,_side] call ALiVE_fnc_DumpR;" \n
                         "            } foreach _reinforce;" \n
                         "" \n
                         "				[""ALiVE OPCOM - FORCEMAKEUP DATA %1 | %2 | %3 | %4""," \n
                         "                    _infantry," \n
                         "                    _motorized," \n
                         "                    _mechanized," \n
                         "                    _armoured," \n
                         "                    0," \n
                         "                    0" \n
                         "                ] call ALiVE_fnc_DumpR;" \n
                         "        };" \n
                         "    };" \n
                         "};" \n
                         "" \n
                         "_OPCOM_DATA= [""analyze"",nil]; _reinforce = nil; _busy = false;"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "OPCOM_RECEIVER">*/
                                class OPCOM_RECEIVER
                                {
                                        itemno = 8;
                                        priority = 1.000000;
                                        to="COLLECT_TO_QUEUE";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/"_failsafe = (time - _timestamp) > _cycleTime;" \n
                                         ""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"_OPCOM_status = ""waiting for data""; " \n
                                         "" \n
                                         "//See PreCondition and Action for _failsafe and _pause" \n
                                         "(!(isnil ""_OPCOM_DATA"") || {isnil ""_OPCOM_DATA"" && {count _OPCOM_QUEUE > 0}} || {_orderFailed} || {_failsafe}) && {!_pause};"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/"if (_dummyVal == 0) then {" \n
                                         "	[""-----------------OPCOM----- INITIAL CONDITION PARAMETERS: %1, %2, %3, %4"", !(isnil ""_OPCOM_DATA""), count _OPCOM_QUEUE > 0, _orderFailed, _failsafe] call ALiVE_fnc_Dump;" \n
                                         "	[""-----------------OPCOM----- INITIAL DATA FINAL: %1"", _OPCOM_DATA] call ALiVE_fnc_Dump;" \n
                                         "};" \n
                                         "" \n
                                         "if (_orderFailed || {_failsafe}) then {" \n
                                         "	_orderFailed = false;" \n
                                         "	_failsafe = false;" \n
                                         "	_OPCOM_DATA = [""analyze"",nil];" \n
                                         "};" \n
                                         "" \n
                                         "_busy = false;" \n
                                         "_dummyVal = _dummyVal + 1;"/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "PERFORM_POSTANAL">*/
                class PERFORM_POSTANAL
                {
                        name = "PERFORM_POSTANAL";
                        itemno = 32;
                        init = /*%FSM<STATEINIT""">*/"private [""_reinforce""];" \n
                         "" \n
                         "//Analyze Forces State" \n
                         "_startForcesStrength = [_OPCOM_HANDLER,""startForceStrength"",[]] call ALiVE_fnc_HashGet;" \n
                         "_currentForceStrength = [_OPCOM_HANDLER,""currentForceStrength"",[]] call ALiVE_fnc_HashGet;" \n
                         "" \n
                         "_startCount = 0;" \n
                         "_currentCount = 0;" \n
                         "_diff = [];" \n
                         "" \n
                         "if (count _startForcesStrength > 0) then {" \n
                         "  for ""_i"" from 0 to ((count _startForcesStrength)-1) do {" \n
                         "    _startCount = _startCount + (_startForcesStrength select _i);" \n
                         "    _currentCount = _currentCount + (_currentForceStrength select _i);" \n
                         "" \n
                         "    _diff pushback ((_startForcesStrength select _i)-(_currentForceStrength select _i));" \n
                         "  };" \n
                         "" \n
                         "  if ( _currentCount != 0 && _startCount != 0 && [""ALiVE_MIL_LOGISTICS""] call ALiVE_fnc_isModuleAvailable) then {" \n
                         "" \n
                         "    if (_debug) then {" \n
                         "        [""ALiVE OPCOM analysing troops for logistics""] call ALiVE_fnc_DumpR;" \n
                         "        [""Starting Forces: %1"",_startForcesStrength] call ALiVE_fnc_DumpR;" \n
                         "        [""Current Forces: %1"",_currentForceStrength] call ALiVE_fnc_DumpR;" \n
                         "        [""Difference: %1"",_diff] call ALiVE_fnc_DumpR;" \n
                         "        [""Starting Count: %1"",_startCount] call ALiVE_fnc_DumpR;" \n
                         "        [""Current Count: %1"",_currentCount] call ALiVE_fnc_DumpR;" \n
                         "        [""Needed Ratio: %1"",_reinforcementRatio] call ALiVE_fnc_DumpR;" \n
                         "        [""ALiVE OPCOM reinforcements needed: %1"",((_currentCount / _startCount) < _reinforcementRatio)] call ALiVE_fnc_DumpR;" \n
                         "    };" \n
                         "      " \n
                         "    if ((_currentCount / _startCount) < _reinforcementRatio) then {_reinforce = +_diff};" \n
                         "  };" \n
                         "};"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "POST_ANALYSIS_DO">*/
                                class POST_ANALYSIS_DO
                                {
                                        itemno = 33;
                                        priority = 0.000000;
                                        to="RESET";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"true"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "REQUEST_QRF">*/
                class REQUEST_QRF
                {
                        name = "REQUEST_QRF";
                        itemno = 35;
                        init = /*%FSM<STATEINIT""">*/"_OPCOM_status = ""request qrf"";" \n
                         "_timestamp = time;" \n
                         "" \n
                         "private _QRFtype = _qrf select 0;" \n
                         "private _target = _qrf select 1;" \n
                         "private _objectives = [_OPCOM_HANDLER,""objectives"",[]] call ALiVE_fnc_HashGet;" \n
                         "" \n
                         "// Passed Target is an objective" \n
                         "if ({_target == (_x select 2 select 0)} count _objectives > 0) then {" \n
                         "" \n
                         "	private _objective = [_OPCOM_HANDLER,""getobjectivebyid"",_target] call ALiVE_fnc_OPCOM;" \n
                         "	private _center = [_objective,""center""] call ALiVE_fnc_HashGet;" \n
                         "	private _size = [_objective,""size"",100] call ALiVE_fnc_HashGet;" \n
                         "" \n
                         "   // Get objective buildings and filter for ALiVE types" \n
                         "   private _buildings = nearestObjects [_center, [""House_F""], _size];" \n
                         "   {" \n
                         "      private _blg = typeof _x;" \n
                         "      if ( {(tolower _blg) find (tolower _x) != -1} count (ALiVE_militaryBuildingTypes + ALIVE_militaryHQBuildingTypes + ALIVE_civilianPopulationBuildingTypes + ALIVE_militaryParkingBuildingTypes + ALIVE_civilianHQBuildingTypes + ALIVE_civilianCommsBuildingTypes + ALIVE_civilianFuelBuildingTypes) == 0) then {" \n
                         "      	_buildings set [_forEachIndex, -1];" \n
                         "      };" \n
                         "   } foreach _buildings;" \n
                         "   _buildings = _buildings - [-1];" \n
                         "" \n
                         "	if (count _buildings > 0) then {" \n
                         "		private _building = selectRandom _buildings;" \n
                         "" \n
                         "		if ([""ALiVE_mil_ATO""] call ALiVE_fnc_IsModuleAvailable) then {" \n
                         "" \n
                         "			// debug ---------------------------------------" \n
                         "			if(_debug) then { [""OPCOM requesting airstrike on objective %3 building %2!"",_QRFtype,_building,_target] call ALIVE_fnc_dumpR; };" \n
                         "			// debug ---------------------------------------" \n
                         "                    " \n
                         "			// [""Calling ATO event""] call ALiVE_fnc_DumpR;" \n
                         "" \n
                         "			_args = [" \n
                         "				""RED"",	// ROE" \n
                         "				200," \n
                         "				""FULL""," \n
                         "				0.1," \n
                         "				0.1," \n
                         "				2000,		// RADIUS" \n
                         "				10," \n
                         "				[_building]  // TARGETS either profile or unit" \n
                         "			];" \n
                         "			_event = ['ATO_REQUEST', [""Strike"", [_side] call ALiVE_fnc_sideTextToObject, _factions select 0, position _building, _args],""OPCOM""] call ALIVE_fnc_event;" \n
                         "			_eventID = [ALIVE_eventLog, ""addEvent"",_event] call ALIVE_fnc_eventLog;" \n
                         "   		};" \n
                         "	};" \n
                         "" \n
                         "// If not an objective assume its a profile" \n
                         "} else {" \n
                         "" \n
                         "	private _profile = [ALiVE_ProfileHandler,""getProfile"",_target] call ALiVE_fnc_ProfileHandler;" \n
                         "" \n
                         "	if (isnil ""_profile"") exitwith {};" \n
                         "" \n
                         "	private _vehicleIDs = ([_profile,""vehicleAssignments"",[[],[]]] call ALIVE_fnc_hashGet) select 1;" \n
                         "	" \n
                         "	if (count _vehicleIDs > 0) then {" \n
                         "" \n
                         "		private _vehicleID = _vehicleIDs select 0;" \n
                         "		private _profileVehicle = [ALiVE_ProfileHandler,""getProfile"",_vehicleID] call ALiVE_fnc_ProfileHandler;" \n
                         "" \n
                         "		if (!isnil ""_profileVehicle"") then {" \n
                         "" \n
                         "            private _objectType = [_profileVehicle,""objectType"",""""] call ALiVE_fnc_HashGet;" \n
                         "" \n
                         "            switch (_objectType) do {" \n
                         "                case ""Plane"" : {_QRFtype = ""air""};" \n
                         "                case ""Helicopter"" : {_QRFtype = ""air""};" \n
                         "                case ""Tank"" : {_QRFtype = ""air""};" \n
                         "                case ""Car"" : {_QRFtype = ""armored""};" \n
                         "                default {_QRFtype = ""infantry""};" \n
                         "            };" \n
                         "		};" \n
                         "	};" \n
                         "	" \n
                         "	// debug ---------------------------------------" \n
                         "	if(_debug) then { [""OPCOM sending QRF of type %1 on entity %2!"",_QRFtype,_target] call ALIVE_fnc_dumpR; };" \n
                         "	// debug ---------------------------------------" \n
                         "" \n
                         "	_attackers = [_OPCOM_HANDLER, ""attackentity"",[_target,1,_QRFtype]] call ALIVE_fnc_OPCOM;" \n
                         "};" \n
                         "" \n
                         "_OPCOM_DATA= [""analyze"",nil]; _qrf = nil; _busy = false;"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "OPCOM_RECEIVER">*/
                                class OPCOM_RECEIVER
                                {
                                        itemno = 8;
                                        priority = 1.000000;
                                        to="COLLECT_TO_QUEUE";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/"_failsafe = (time - _timestamp) > _cycleTime;" \n
                                         ""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"_OPCOM_status = ""waiting for data""; " \n
                                         "" \n
                                         "//See PreCondition and Action for _failsafe and _pause" \n
                                         "(!(isnil ""_OPCOM_DATA"") || {isnil ""_OPCOM_DATA"" && {count _OPCOM_QUEUE > 0}} || {_orderFailed} || {_failsafe}) && {!_pause};"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/"if (_dummyVal == 0) then {" \n
                                         "	[""-----------------OPCOM----- INITIAL CONDITION PARAMETERS: %1, %2, %3, %4"", !(isnil ""_OPCOM_DATA""), count _OPCOM_QUEUE > 0, _orderFailed, _failsafe] call ALiVE_fnc_Dump;" \n
                                         "	[""-----------------OPCOM----- INITIAL DATA FINAL: %1"", _OPCOM_DATA] call ALiVE_fnc_Dump;" \n
                                         "};" \n
                                         "" \n
                                         "if (_orderFailed || {_failsafe}) then {" \n
                                         "	_orderFailed = false;" \n
                                         "	_failsafe = false;" \n
                                         "	_OPCOM_DATA = [""analyze"",nil];" \n
                                         "};" \n
                                         "" \n
                                         "_busy = false;" \n
                                         "_dummyVal = _dummyVal + 1;"/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "REQUEST_RECON">*/
                class REQUEST_RECON
                {
                        name = "REQUEST_RECON";
                        itemno = 37;
                        init = /*%FSM<STATEINIT""">*/"_OPCOM_status = ""request recon"";" \n
                         "_timestamp = time;" \n
                         "" \n
                         "private _RECONtype = _recon select 0;" \n
                         "private _target = _recon select 1;" \n
                         "private _objectives = [_OPCOM_HANDLER,""objectives"",[]] call ALiVE_fnc_HashGet;" \n
                         "" \n
                         "// Passed Target is an objective" \n
                         "if ({_target == (_x select 2 select 0)} count _objectives > 0) then {" \n
                         "" \n
                         "    private _objective = [_OPCOM_HANDLER,""getobjectivebyid"",_target] call ALiVE_fnc_OPCOM;" \n
                         "    private _center = [_objective,""center""] call ALiVE_fnc_HashGet;" \n
                         "    private _size = [_objective,""size"",100] call ALiVE_fnc_HashGet;" \n
                         "" \n
                         "    // Only send recce if enemies are near (OPCOM doesn't know this but avoids sending recce's to friendly territory)" \n
                         "    private _enemyterritory = [_center, _side, 1000, true] call ALIVE_fnc_isEnemyNear;" \n
                         "" \n
                         "    if (_enemyTerritory && _size > 150) then {" \n
                         "        // Get objective buildings and filter for ALiVE types" \n
                         "        private _buildings = nearestObjects [_center, [""House_F""], _size];" \n
                         "        {" \n
                         "             private _blg = typeof _x;" \n
                         "                 if ( {(tolower _blg) find (tolower _x) != -1} count (ALiVE_militaryBuildingTypes + ALIVE_militaryHQBuildingTypes + ALIVE_civilianPopulationBuildingTypes + ALIVE_militaryParkingBuildingTypes + ALIVE_civilianHQBuildingTypes + ALIVE_civilianCommsBuildingTypes + ALIVE_civilianFuelBuildingTypes) == 0) then {" \n
                         "                _buildings set [_forEachIndex, -1];" \n
                         "            };" \n
                         "        } foreach _buildings;" \n
                         "        _buildings = _buildings - [-1];" \n
                         "" \n
                         "        if (count _buildings > 0) then {" \n
                         "            private _building = selectRandom _buildings;" \n
                         "" \n
                         "            if ([""ALiVE_mil_ATO""] call ALiVE_fnc_IsModuleAvailable) then {" \n
                         "" \n
                         "                // debug ---------------------------------------" \n
                         "                if(_debug) then { [""OPCOM requesting recce on objective %3 building %2!"",_RECONtype,_building,_target] call ALIVE_fnc_dumpR; };" \n
                         "                // debug ---------------------------------------" \n
                         "" \n
                         "                // [""Calling ATO event""] call ALiVE_fnc_DumpR;" \n
                         "" \n
                         "                waitUntil {[""ALiVE_mil_ATO""] call ALiVE_fnc_isModuleInitialised};" \n
                         "" \n
                         "                _args = [" \n
                         "                    ""GREEN"",    // ROE" \n
                         "                    1200,       // Height" \n
                         "                    ""NORMAL"", // SPEED" \n
                         "                    0.1,        // Weapon %" \n
                         "                    0.75,       // Fuel %" \n
                         "                    1000,       // RADIUS" \n
                         "                    15,          // DURATION in mins" \n
                         "                    [_building]  // TARGETS either profile or unit" \n
                         "                ];" \n
                         "                _event = ['ATO_REQUEST', [""Recce"", [_side] call ALiVE_fnc_sideTextToObject, _factions select 0, position _building, _args],""OPCOM""] call ALIVE_fnc_event;" \n
                         "                _eventID = [ALIVE_eventLog, ""addEvent"",_event] call ALIVE_fnc_eventLog;" \n
                         "            } else {" \n
                         "                // debug ---------------------------------------" \n
                         "                if(_debug) then { [""OPCOM request for recce on objective %3 building %2 not possible! No ATO available!"",_RECONtype,_building,_target] call ALIVE_fnc_dumpR; };" \n
                         "                // debug ---------------------------------------" \n
                         "            };" \n
                         "        };" \n
                         "    };" \n
                         "};" \n
                         "" \n
                         "_OPCOM_DATA= [""analyze"",nil]; _recon = nil; _busy = false;"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "OPCOM_RECEIVER">*/
                                class OPCOM_RECEIVER
                                {
                                        itemno = 8;
                                        priority = 1.000000;
                                        to="COLLECT_TO_QUEUE";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/"_failsafe = (time - _timestamp) > _cycleTime;" \n
                                         ""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"_OPCOM_status = ""waiting for data""; " \n
                                         "" \n
                                         "//See PreCondition and Action for _failsafe and _pause" \n
                                         "(!(isnil ""_OPCOM_DATA"") || {isnil ""_OPCOM_DATA"" && {count _OPCOM_QUEUE > 0}} || {_orderFailed} || {_failsafe}) && {!_pause};"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/"if (_dummyVal == 0) then {" \n
                                         "	[""-----------------OPCOM----- INITIAL CONDITION PARAMETERS: %1, %2, %3, %4"", !(isnil ""_OPCOM_DATA""), count _OPCOM_QUEUE > 0, _orderFailed, _failsafe] call ALiVE_fnc_Dump;" \n
                                         "	[""-----------------OPCOM----- INITIAL DATA FINAL: %1"", _OPCOM_DATA] call ALiVE_fnc_Dump;" \n
                                         "};" \n
                                         "" \n
                                         "if (_orderFailed || {_failsafe}) then {" \n
                                         "	_orderFailed = false;" \n
                                         "	_failsafe = false;" \n
                                         "	_OPCOM_DATA = [""analyze"",nil];" \n
                                         "};" \n
                                         "" \n
                                         "_busy = false;" \n
                                         "_dummyVal = _dummyVal + 1;"/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "REQUEST_OCA">*/
                class REQUEST_OCA
                {
                        name = "REQUEST_OCA";
                        itemno = 39;
                        init = /*%FSM<STATEINIT""">*/"_OPCOM_status = ""request oca"";" \n
                         "_timestamp = time;" \n
                         "" \n
                         "private _OCAtype = _oca select 0;" \n
                         "private _target = _oca select 1;" \n
                         "private _objectives = [_OPCOM_HANDLER,""objectives"",[]] call ALiVE_fnc_HashGet;" \n
                         "" \n
                         "// Passed Target is an objective" \n
                         "if ({_target == (_x select 2 select 0)} count _objectives > 0) then {" \n
                         "" \n
                         "	private _objective = [_OPCOM_HANDLER,""getobjectivebyid"",_target] call ALiVE_fnc_OPCOM;" \n
                         "	private _center = [_objective,""center""] call ALiVE_fnc_HashGet;" \n
                         "	private _size = [_objective,""size"",100] call ALiVE_fnc_HashGet; " \n
                         "" \n
                         "   // Get hangars, radars, atc" \n
                         "   private _buildings = nearestObjects [_center, [""House_F""], _size];" \n
                         "   {" \n
                         "      private _blg = typeof _x;" \n
                         "      if ( {(tolower _blg) find (tolower _x) != -1} count [""hangar"",""radar"",""airport_tower"",""controltower""] == 0) then {" \n
                         "      	_buildings set [_forEachIndex, -1];" \n
                         "      };" \n
                         "   } foreach _buildings;" \n
                         "   _buildings = _buildings - [-1];" \n
                         "" \n
                         "	if (count _buildings > 0) then {" \n
                         "		private _building = selectRandom _buildings;" \n
                         "" \n
                         "		if ([""ALiVE_mil_ATO""] call ALiVE_fnc_IsModuleAvailable) then {" \n
                         "" \n
                         "			// debug ---------------------------------------" \n
                         "			if(_debug) then { [""OPCOM requesting OCA on objective %3 building %2!"",_OCAtype,_building,_target] call ALIVE_fnc_dumpR; };" \n
                         "			// debug ---------------------------------------" \n
                         "                    " \n
                         "			// [""Calling ATO event""] call ALiVE_fnc_DumpR;" \n
                         "" \n
                         "			_args = [" \n
                         "				""RED"",	// ROE" \n
                         "				100,		// Height" \n
                         "				""FULL"", // SPEED" \n
                         "				0.5, 		// Weapon %" \n
                         "				0.5,		// Fuel %" \n
                         "				800,		// RADIUS" \n
                         "				10,			 // DURATION in mins" \n
                         "				_buildings  // TARGETS either profile or unit" \n
                         "			];" \n
                         "			_event = ['ATO_REQUEST', [""OCA"", [_side] call ALiVE_fnc_sideTextToObject, _factions select 0, position _building, _args],""OPCOM""] call ALIVE_fnc_event;" \n
                         "			_eventID = [ALIVE_eventLog, ""addEvent"",_event] call ALIVE_fnc_eventLog;" \n
                         "   	} else {" \n
                         "			// debug ---------------------------------------" \n
                         "			if(_debug) then { [""OPCOM request for OCA on objective %3 building %2 not possible! No ATO available!"",_OCAtype,_building,_target] call ALIVE_fnc_dumpR; };" \n
                         "			// debug ---------------------------------------" \n
                         "		};" \n
                         "	};" \n
                         "};" \n
                         "" \n
                         "_OPCOM_DATA= [""analyze"",nil]; _oca = nil; _busy = false;"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "OPCOM_RECEIVER">*/
                                class OPCOM_RECEIVER
                                {
                                        itemno = 8;
                                        priority = 1.000000;
                                        to="COLLECT_TO_QUEUE";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/"_failsafe = (time - _timestamp) > _cycleTime;" \n
                                         ""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"_OPCOM_status = ""waiting for data""; " \n
                                         "" \n
                                         "//See PreCondition and Action for _failsafe and _pause" \n
                                         "(!(isnil ""_OPCOM_DATA"") || {isnil ""_OPCOM_DATA"" && {count _OPCOM_QUEUE > 0}} || {_orderFailed} || {_failsafe}) && {!_pause};"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/"if (_dummyVal == 0) then {" \n
                                         "	[""-----------------OPCOM----- INITIAL CONDITION PARAMETERS: %1, %2, %3, %4"", !(isnil ""_OPCOM_DATA""), count _OPCOM_QUEUE > 0, _orderFailed, _failsafe] call ALiVE_fnc_Dump;" \n
                                         "	[""-----------------OPCOM----- INITIAL DATA FINAL: %1"", _OPCOM_DATA] call ALiVE_fnc_Dump;" \n
                                         "};" \n
                                         "" \n
                                         "if (_orderFailed || {_failsafe}) then {" \n
                                         "	_orderFailed = false;" \n
                                         "	_failsafe = false;" \n
                                         "	_OPCOM_DATA = [""analyze"",nil];" \n
                                         "};" \n
                                         "" \n
                                         "_busy = false;" \n
                                         "_dummyVal = _dummyVal + 1;"/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "INIT">*/
                class INIT
                {
                        name = "INIT";
                        itemno = 40;
                        init = /*%FSM<STATEINIT""">*/"private _exitFSM = false;" \n
                         "private _pause = false;" \n
                         "" \n
                         "private _opcomInstance = _this select 0;" \n
                         "private _objectives = [_opcomInstance,""objectives""] call ALiVE_fnc_hashGet;" \n
                         "private _opcomFSM = [_opcomInstance,""OPCOM_FSM""] call ALiVE_fnc_hashGet;" \n
                         "private _tacomFSM = [_opcomInstance,""TACOM_FSM""] call ALiVE_fnc_hashGet;" \n
                         "" \n
                         "private _debug = [_opcomInstance,""debug""] call ALiVE_fnc_hashGet;" \n
                         "private _side = [_opcomInstance,""side""] call ALiVE_fnc_hashGet;" \n
                         "private _factions = [_opcomInstance,""factions""] call ALiVE_fnc_hashGet;" \n
                         "private _sidesEnemy = [_opcomInstance,""sidesenemy""] call ALiVE_fnc_hashGet;" \n
                         "private _sidesFriendly = [_opcomInstance,""sidesfriendly""] call ALiVE_fnc_hashGet;" \n
                         "private _controltype = [_opcomInstance,""controltype""] call ALiVE_fnc_hashGet;" \n
                         "private _maxActiveAttacks = [_opcomInstance,""simultanobjectives""] call ALiVE_fnc_hashGet;" \n
                         "private _reinforcementRatio = [_opcomInstance,""reinforcements""] call ALiVE_fnc_hashGet;" \n
                         "" \n
                         "private _objectives = [_opcomInstance,""objectives""] call ALiVE_fnc_hashGet;" \n
                         "private _objectivesByID = [_opcomInstance,""objectivesByID""] call ALiVE_fnc_hashGet;" \n
                         "private _heldObjectives = [_opcomInstance,""heldObjectives""] call ALiVE_fnc_hashGet;" \n
                         "private _allSections = [_opcomInstance,""allSections""] call ALiVE_fnc_hashGet;" \n
                         "private _sectionsByType = [_opcomInstance,""sectionsByType""] call ALiVE_fnc_hashget;" \n
                         "private _orders = [_opcomInstance,""orders""] call ALiVE_fnc_hashGet;" \n
                         "private _pendingOrders = [_opcomInstance,""pendingorders""] call ALiVE_fnc_hashGet;" \n
                         "private _missions = [_opcomInstance,""missions""] call ALiVE_fnc_hashGet;" \n
                         "private _missionOptions = [_opcomInstance,""missionOptions""] call ALiVE_fnc_hashGet;" \n
                         "private _objectivesToAdd = [_opcomInstance,""objectivesToAdd""] call ALiVE_fnc_hashGet;" \n
                         "" \n
                         "private _lastDataProcessTime = time;" \n
                         "private _dataQueue = [];" \n
                         "" \n
                         "private _lastInternalAnalysisTime = -723; // make sure internal analysis is our first cycle" \n
                         "private _objectivesToAnalyze = [];" \n
                         "private _profilesLeftToSort = [];" \n
                         "private _sortedProfiles = [];" \n
                         "private _objectiveOccupationReports = [];" \n
                         "private _ordersToSend = [];" \n
                         "" \n
                         "private _profilesUnregisteredWhileSorting = [];" \n
                         "" \n
                         "private _lastDataSyncTime = time;" \n
                         "" \n
                         "private _colorside = switch (_side) do {" \n
                         "    case (""WEST"") : { ""ColorBlue""   };" \n
                         "    case (""EAST"") : { ""ColorRed""    };" \n
                         "    case (""GUER"") : { ""ColorGreen""  };" \n
                         "    default         { ""ColorRed""    };" \n
                         "};" \n
                         "" \n
                         "_initComplete = true;" \n
                         "" \n
                         "if (_debug) then {" \n
                         "    [ ""OPCOM FSM INIT COMPLETE ""] call ALIVE_fnc_dumpR;" \n
                         "};" \n
                         ""/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "INIT_COMPLETE">*/
                                class INIT_COMPLETE
                                {
                                        itemno = 41;
                                        priority = 0.000000;
                                        to="Start";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/"_opcomFSM =  [_opcomInstance,""OPCOM_FSM"", -1] call ALiVE_fnc_hashGet;" \n
                                         "_tacomFSM =  [_opcomInstance,""TACOM_FSM"", -1] call ALiVE_fnc_hashGet;" \n
                                         "" \n
                                         "private _tacomInitComplete = _tacomFSM getFsmVariable [""_initComplete"", false];" \n
                                         ""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"_opcomFSM > 0 && _tacomFSM > 0" \n
                                         "&&" \n
                                         "{ _initComplete && _tacomInitComplete }" \n
                                         ""/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Start">*/
                class Start
                {
                        name = "Start";
                        itemno = 42;
                        init = /*%FSM<STATEINIT""">*/"_dataQueue pushback [""internalAnalysis"", []];" \n
                         "" \n
                         "private _tacomDataQueue = _tacomFSM getFsmVariable ""_dataQueue"";"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "Started">*/
                                class Started
                                {
                                        itemno = 43;
                                        priority = 0.000000;
                                        to="Wait_for_Data";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"true" \n
                                         ""/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Wait_for_Data">*/
                class Wait_for_Data
                {
                        name = "Wait_for_Data";
                        itemno = 44;
                        init = /*%FSM<STATEINIT""">*/""/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "EXIT">*/
                                class EXIT
                                {
                                        itemno = 56;
                                        priority = 100.000000;
                                        to="END_1";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"_exitFSM"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "Paused">*/
                                class Paused
                                {
                                        itemno = 59;
                                        priority = 90.000000;
                                        to="Wait_for_Data";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"_pause" \n
                                         ""/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "Check_For_Data_C">*/
                                class Check_For_Data_C
                                {
                                        itemno = 60;
                                        priority = 2.000000;
                                        to="Handle_Changes";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"!(_objectivesToAdd isequalto [])" \n
                                         ""/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "Timeout">*/
                                class Timeout
                                {
                                        itemno = 46;
                                        priority = 1.000000;
                                        to="Prepare_Internal";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"// if queue is empty run analysis every 15s" \n
                                         "// if 25s have elapsed without analysis, ignore queue and start analysis" \n
                                         "" \n
                                         "((_dataQueue isequalto []) && time - _lastInternalAnalysisTime >= 20)" \n
                                         "||" \n
                                         "{ time - _lastInternalAnalysisTime >= 40 }" \n
                                         ""/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "Data_Received">*/
                                class Data_Received
                                {
                                        itemno = 45;
                                        priority = 0.000000;
                                        to="Process_Data";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"!(_dataQueue isequalto []) && { time - _lastDataProcessTime > 0.25 }" \n
                                         ""/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Process_Data">*/
                class Process_Data
                {
                        name = "Process_Data";
                        itemno = 47;
                        init = /*%FSM<STATEINIT""">*/"private _data = _dataQueue deleteat 0;" \n
                         "" \n
                         "_data params [""_dataMessage"",""_dataArgs"",""_dataSender""];" \n
                         "" \n
                         "" \n
                         "switch (_dataMessage) do {" \n
                         "" \n
                         "	case ""evaluation_complete"": {" \n
                         "		// create order object" \n
                         "	};" \n
                         "" \n
                         "};" \n
                         "" \n
                         "" \n
                         "_lastDataProcessTime = time;" \n
                         ""/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "Processed">*/
                                class Processed
                                {
                                        itemno = 48;
                                        priority = 0.000000;
                                        to="Order_TACOM_1";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"true" \n
                                         ""/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Order_TACOM_1">*/
                class Order_TACOM_1
                {
                        name = "Order_TACOM_1";
                        itemno = 49;
                        init = /*%FSM<STATEINIT""">*/""/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "Handled">*/
                                class Handled
                                {
                                        itemno = 58;
                                        priority = 0.000000;
                                        to="Wait_for_Data";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/"true" \n
                                         ""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/""/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Analyze_Objective">*/
                class Analyze_Objective
                {
                        name = "Analyze_Objective";
                        itemno = 50;
                        init = /*%FSM<STATEINIT""">*/"// failsafe for no objectives" \n
                         "if (_objectivesToAnalyze isequalto []) exitwith {};" \n
                         "" \n
                         "private _objectiveToAnalyze = _objectivesToAnalyze deleteat 0;" \n
                         "" \n
                         "private _clusterOccupation = [_opcomInstance,""analyzeObjectiveOccupation"", _objectiveToAnalyze] call ALiVE_fnc_OPCOM;" \n
                         "" \n
                         "_objectiveOccupationReports pushback _clusterOccupation;" \n
                         ""/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "Objectives_Left">*/
                                class Objectives_Left
                                {
                                        itemno = 64;
                                        priority = 10.000000;
                                        to="Analyze_Objective";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"!(_objectivesToAnalyze isequalto [])" \n
                                         ""/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "Objectives_Analy">*/
                                class Objectives_Analy
                                {
                                        itemno = 51;
                                        priority = 1.000000;
                                        to="Generate_Orders";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"true" \n
                                         ""/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "END_1">*/
                class END_1
                {
                        name = "END_1";
                        itemno = 57;
                        init = /*%FSM<STATEINIT""">*/"[_OPCOM_HANDLER,""OPCOM_FSM""] call ALiVE_fnc_HashRem;"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Handle_Changes">*/
                class Handle_Changes
                {
                        name = "Handle_Changes";
                        itemno = 61;
                        init = /*%FSM<STATEINIT""">*/"[_opcomInstance,""addBufferedObjectives""] call ALiVE_fnc_OPCOM;" \n
                         "" \n
                         "_lastDataSyncTime = time;" \n
                         "" \n
                         "// sync variables between opcom and opcom fsm"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "Changes_Handled">*/
                                class Changes_Handled
                                {
                                        itemno = 62;
                                        priority = 2.000000;
                                        to="Wait_for_Data";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"true" \n
                                         ""/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Prepare_Internal">*/
                class Prepare_Internal
                {
                        name = "Prepare_Internal";
                        itemno = 65;
                        init = /*%FSM<STATEINIT""">*/"// lets see how many further attacks we are allowed" \n
                         "" \n
                         "private _activeOffensiveOrders = 0;" \n
                         "private _objectivesWithOrders = [];" \n
                         "" \n
                         "private _countOffensiveOrders = {" \n
                         "    private _isOffensiveOrder = [_x,""isOffensiveOrder""] call ALiVE_fnc_hashGet;" \n
                         "    private _objectiveID = [_x,""objective""] call ALiVE_fnc_hashGet;" \n
                         "" \n
                         "    if (_isOffensiveOrder) then {" \n
                         "        _activeOffensiveOrders = _activeOffensiveOrders + 1;" \n
                         "    };" \n
                         "" \n
                         "    _objectivesWithOrders pushback _objectiveID;" \n
                         "};" \n
                         "" \n
                         "_countOffensiveOrders foreach (_pendingOrders select 2);" \n
                         "_countOffensiveOrders foreach (_orders select 2);" \n
                         "" \n
                         "// lets find which objectives to attack" \n
                         "" \n
                         "private _nextObjectivesToTake = [];" \n
                         "{" \n
                         "    if (count _nextObjectivesToTake > _maxActiveAttacks) exitwith {};" \n
                         "" \n
                         "    private _objectiveID = [_x,""objectiveID""] call ALiVE_fnc_hashGet;" \n
                         "    if !(_objectiveID in _objectivesWithOrders) then {" \n
                         "        _nextObjectivesToTake pushback _x;" \n
                         "    };" \n
                         "} foreach _objectives;" \n
                         "" \n
                         "" \n
                         "" \n
                         "// analyze held objectives first so we" \n
                         "// can quickly find any necessary defend situations" \n
                         "_objectivesToAnalyze = _heldObjectives + _nextObjectivesToTake;" \n
                         "" \n
                         "_objectiveOccupationReports = [];" \n
                         "_sortedProfiles = [[],[],[],[],[],[],[]];" \n
                         "" \n
                         "{" \n
                         "    private _factionProfileIDs = [ALiVE_profileHandler,""getProfilesByFaction"", _x] call ALiVE_fnc_profileHandler;" \n
                         "    _profilesLeftToSort append _factionProfileIDs;" \n
                         "} foreach _factions;" \n
                         "" \n
                         "_allSections = +_profilesLeftToSort;" \n
                         ""/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "Prepared">*/
                                class Prepared
                                {
                                        itemno = 66;
                                        priority = 1.000000;
                                        to="Analyze_Available";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"true" \n
                                         ""/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Analyze_Available">*/
                class Analyze_Available
                {
                        name = "Analyze_Available";
                        itemno = 67;
                        init = /*%FSM<STATEINIT""">*/"// failsafe for no profiles" \n
                         "if (_profilesLeftToSort isequalto []) exitwith {};" \n
                         "" \n
                         "// sort 50 per frame" \n
                         "private _profilesToSort = _profilesLeftToSort select [0, 25];" \n
                         "_profilesLeftToSort deleteRange [0,25];" \n
                         "" \n
                         "private _sortedProfileBlock = [_opcomInstance,""sortProfilesByType"", _profilesToSort] call ALiVE_fnc_OPCOM;" \n
                         "" \n
                         "{" \n
                         "	(_sortedProfiles select _foreachindex) append (_sortedProfileBlock select _foreachindex);" \n
                         "} foreach _sortedProfiles;" \n
                         ""/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "Troops_Left">*/
                                class Troops_Left
                                {
                                        itemno = 69;
                                        priority = 10.000000;
                                        to="Analyze_Available";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"!(_profilesLeftToSort isequalto [])" \n
                                         ""/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "Prepared">*/
                                class Prepared
                                {
                                        itemno = 68;
                                        priority = 1.000000;
                                        to="Analyze_Objective";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"true" \n
                                         ""/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/"[_sectionsByType,""infantry"", _sortedProfiles select 0] call ALiVE_fnc_hashSet;" \n
                                         "[_sectionsByType,""motorized"", _sortedProfiles select 1] call ALiVE_fnc_hashSet;" \n
                                         "[_sectionsByType,""mechanized"", _sortedProfiles select 2] call ALiVE_fnc_hashSet;" \n
                                         "[_sectionsByType,""armored"", _sortedProfiles select 3] call ALiVE_fnc_hashSet;" \n
                                         "[_sectionsByType,""anti_air"", _sortedProfiles select 4] call ALiVE_fnc_hashSet;" \n
                                         "[_sectionsByType,""artillery"", _sortedProfiles select 5] call ALiVE_fnc_hashSet;" \n
                                         "[_sectionsByType,""naval"", _sortedProfiles select 6] call ALiVE_fnc_hashSet;" \n
                                         "" \n
                                         "[_opcomInstance,""allSections"", _allSections] call ALiVE_fnc_hashSet;" \n
                                         ""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "Generate_Orders">*/
                class Generate_Orders
                {
                        name = "Generate_Orders";
                        itemno = 70;
                        init = /*%FSM<STATEINIT""">*/"// failsafe for no reports" \n
                         "if (_objectiveOccupationReports isequalto []) exitwith {};" \n
                         "" \n
                         "private _reportToAnalyze = _objectiveOccupationReports deleteat 0;" \n
                         "" \n
                         "_reportToAnalyze params [""_objective"",""_nearFriendlyCount"",""_nearEnemyCount"",""_nearFriendlies"",""_nearEnemies""];" \n
                         "" \n
                         "{" \n
                         "    private _condition = [_x,""condition""] call ALiVE_fnc_hashGet;" \n
                         "" \n
                         "    if (_x call _condition) then {" \n
                         "        private _name = [_x,""name""] call ALiVE_fnc_hashGet;" \n
                         "        private _objectiveID = [_objective,""objectiveID""] call ALiVE_fnc_hashGet;" \n
                         "" \n
                         "        private _chosenOption = +_x;" \n
                         "        [_chosenOption,""id"", [_opcomInstance,""getNextOrderID""] call ALiVE_fnc_OPCOM] call ALiVE_fnc_hashSet;" \n
                         "        [_chosenOption,""objective"", _objectiveID] call ALiVE_fnc_hashSet;" \n
                         "        [_chosenOption,""timeStarted"", time] call ALiVE_fnc_hashSet;" \n
                         "" \n
                         "        _ordersToSend pushback _chosenOption;" \n
                         "    };" \n
                         "} foreach _missionOptions;" \n
                         ""/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "Reports_Left">*/
                                class Reports_Left
                                {
                                        itemno = 72;
                                        priority = 10.000000;
                                        to="Generate_Orders";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"!(_objectiveOccupationReports isequalto [])" \n
                                         ""/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "Orders_Sent_To_T">*/
                                class Orders_Sent_To_T
                                {
                                        itemno = 71;
                                        priority = 1.000000;
                                        to="Wait_for_Data";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"true" \n
                                         ""/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/"{" \n
                                         "    private _orderedMission = _x;" \n
                                         "    private _orderID = [_orderedMission,""id""] call ALiVE_fnc_hashGet;" \n
                                         "    private _orderName = [_orderedMission,""name""] call ALiVE_fnc_hashGet;" \n
                                         "    private _objectiveID = [_orderedMission,""objective""] call ALiVE_fnc_hashGet;" \n
                                         "" \n
                                         "    [_pendingOrders,_orderID, _orderedMission] call ALiVE_fnc_hashSet;" \n
                                         "" \n
                                         "    if (_debug) then {" \n
                                         "        [" \n
                                         "            ""OPCOM sending order to TACOM for evaluation: %1 for %2""," \n
                                         "            _orderName," \n
                                         "            _objectiveID" \n
                                         "        ] call ALiVE_fnc_DumpR;" \n
                                         "    };" \n
                                         "} foreach _ordersToSend;" \n
                                         "" \n
                                         "// send order to tacom for evaluation" \n
                                         "_tacomDataQueue append (_ordersToSend apply { [""evaluate"", _x] });" \n
                                         "" \n
                                         "_ordersToSend = [];" \n
                                         "" \n
                                         "_lastInternalAnalysisTime = time;" \n
                                         ""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "____FAKE____">*/
                class ____FAKE____
                {
                        name = "____FAKE____";
                        itemno = 73;
                        init = /*%FSM<STATEINIT""">*/""/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "INIT_COMPLETE">*/
                                class INIT_COMPLETE
                                {
                                        itemno = 0;
                                        priority = 0.000000;
                                        to="INITIALIZE";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/"_OPCOM_FSM =  [_OPCOM_HANDLER,""OPCOM_FSM""] call ALiVE_fnc_HashGet;" \n
                                         "_TACOM_FSM =  [_OPCOM_HANDLER,""TACOM_FSM""] call ALiVE_fnc_HashGet;"/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"!(isnil ""_OPCOM_FSM"") && !(isnil ""_TACOM_FSM"") && {_OPCOM_FSM > 0 && _TACOM_FSM > 0}"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
        };
        initState="INIT";
        finalStates[] =
        {
                "END",
                "END_1",
        };
};
/*%FSM</COMPILE>*/