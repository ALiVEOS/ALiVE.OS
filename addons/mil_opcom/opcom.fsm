/*%FSM<COMPILE "Z:\home\marcel\.steam\root\steamapps\common\Arma 3 Tools\FSMEditor\scriptedFSM.cfg, opcom">*/
/*%FSM<HEAD>*/
/*
item0[] = {"INIT",0,250,-717.630066,-1005.371277,-627.630066,-955.371338,0.000000,"INIT"};
item1[] = {"INIT_COMPLETE",4,218,-720.395935,-937.944458,-630.395935,-887.944458,0.000000,"INIT" \n "COMPLETE"};
item2[] = {"ANALYZE",2,4346,-915.210754,-306.293610,-417.475098,-258.428986,0.000000,"ANALYZE"};
item3[] = {"OPCOM_FEEDER",4,218,-711.187256,-222.682648,-621.187195,-172.682648,1.000000,"OPCOM" \n "FEEDER"};
item4[] = {"ATTACK_Condition",4,218,-891.552124,-203.731567,-801.552002,-153.731567,5.000000,"ATTACK" \n "Conditions"};
item5[] = {"",7,210,-341.155090,36.380066,-333.155060,44.380096,0.000000,""};
item6[] = {"",7,210,-347.610199,-817.749023,-339.610168,-809.749023,0.000000,""};
item7[] = {"DEFEND_condition",4,218,-787.492737,-203.595917,-697.492737,-153.595917,4.000000,"DEFEND" \n "conditions"};
item8[] = {"RESERVE_conditio",4,218,-642.570801,-201.616302,-552.570740,-151.616302,3.000000,"RESERVE" \n "conditions"};
item9[] = {"OPCOM_RECEIVER",4,218,-717.074463,-838.579346,-627.074646,-788.579346,1.000000,"OPCOM" \n "RECEIVER"};
item10[] = {"CUSTOM_condition",4,218,-502.155029,-201.889679,-412.155121,-151.889679,2.000000,"CUSTOM" \n "conditions"};
item11[] = {"ORDER_TACOM",2,250,-924.860840,-94.510040,-425.593536,-50.306946,0.000000,"ORDER" \n "TACOM"};
item12[] = {"TACOM_CONFIRM",4,218,-651.682068,14.823029,-561.682068,64.823029,0.000000,"TACOM" \n "CONFIRM"};
item13[] = {"TACOM_NOT_CONFIR",4,218,-767.965027,13.736359,-677.965149,63.736359,0.000000,"TACOM" \n "NOT CONFIRM"};
item14[] = {"",7,210,-1031.257935,34.909210,-1023.257385,42.909210,0.000000,""};
item15[] = {"_",-1,250,-433.177032,51.216019,-430.091949,51.216019,0.000000,""};
item16[] = {"",7,210,-1032.922607,-816.473755,-1024.922607,-808.473755,0.000000,""};
item17[] = {"INITIALIZE",2,250,-721.197266,-875.105042,-625.643738,-851.020447,0.000000,"INITIALIZE"};
item18[] = {"NOT_BUSY",2,250,-926.275818,15.184509,-836.275818,65.184509,0.000000,"NOT BUSY"};
item19[] = {"NOT_BUSY_1",2,250,-520.941284,16.271149,-430.941254,66.271149,0.000000,"NOT BUSY"};
item20[] = {"COLLECT_TO_QUEUE",2,250,-599.758545,-647.769531,-509.758667,-597.769531,0.000000,"COLLECT" \n "TO QUEUE"};
item21[] = {"ENTRIES_IN_QUEUE",4,218,-598.921387,-529.275208,-508.921387,-479.275299,2.000000,"ENTRIES" \n "IN QUEUE"};
item22[] = {"ANALYZE_Conditio",4,218,-1203.018188,-310.200287,-1113.017944,-260.200104,0.000000,"ANALYZE" \n "Conditions"};
item23[] = {"PERFORM_ANALYSIS",2,250,-1205.917603,-535.859314,-1115.917603,-485.859314,0.000000,"PERFORM" \n "ANALYSIS"};
item24[] = {"ANALYSIS_DONE",4,218,-1209.427368,-599.538696,-1119.427368,-549.538696,0.000000,"ANALYSIS" \n "DONE"};
item25[] = {"RESET",2,250,-1210.631958,-838.320801,-1120.631958,-788.320801,0.000000,"RESET"};
item26[] = {"PERFORM_CLEANUP",2,250,-1201.964966,-382.972961,-1111.964966,-332.972961,0.000000,"PERFORM" \n "CLEANUP"};
item27[] = {"CLEANUP_DONE",4,218,-1201.899536,-463.712677,-1111.899536,-413.712738,0.000000,"CLEANUP" \n "DONE"};
item28[] = {"EXIT",4,218,-712.073486,100.377136,-622.073486,150.377090,99.000000,"EXIT"};
item29[] = {"END",1,250,-712.089600,226.488464,-622.089539,276.488434,0.000000,"END"};
item30[] = {"REEINFORCE_Condi",4,218,-269.226440,-306.737396,-179.226395,-256.737396,0.000000,"REEINFORCE" \n "Conditions"};
item31[] = {"REQUEST_REEINFOR",2,250,-269.835327,-838.042908,-179.835312,-788.042908,0.000000,"REQUEST" \n "REEINFORCEMENTS"};
item32[] = {"",7,210,-1164.081909,36.036972,-1156.081909,44.036972,0.000000,""};
item33[] = {"PERFORM_POSTANAL",2,250,-1209.788086,-683.964172,-1119.788086,-633.964172,0.000000,"PERFORM" \n "POSTANALYSIS"};
item34[] = {"POST_ANALYSIS_DO",4,218,-1208.969116,-760.668579,-1118.969116,-710.668579,0.000000,"POST" \n "ANALYSIS" \n "DONE"};
item35[] = {"QRF_Conditions",4,218,-133.845856,-306.268250,-43.845856,-256.268250,0.000000,"QRF" \n "Conditions"};
item36[] = {"REQUEST_QRF",2,250,-133.738892,-834.303589,-43.738892,-784.303650,0.000000,"REQUEST" \n "QRF"};
item37[] = {"RECON_Conditions",4,218,9.105785,-308.301544,99.105774,-258.301483,0.000000,"RECON" \n "Conditions"};
item38[] = {"REQUEST_RECON",2,250,10.006296,-836.706787,100.006363,-786.706909,0.000000,"REQUEST" \n "RECON"};
item39[] = {"OCA_Conditions",4,218,150.274902,-304.513031,240.274811,-254.513000,0.000000,"OCA" \n "Conditions"};
item40[] = {"REQUEST_OCA",2,250,150.634949,-836.432495,240.634949,-786.432495,0.000000,"REQUEST" \n "OCA"};
item41[] = {"Skip_Objective",4,218,-994.924133,-204.559387,-904.923767,-154.559387,0.000000,"Skip" \n "Objective"};
version=1;
class LayoutItems
{
	class Item15
	{
		class ItemInfo
		{
			FontFace="Arial";
			FontHeight=10;
			lStyle=1;
		};
	};
};
link0[] = {0,1};
link1[] = {1,17};
link2[] = {2,3};
link3[] = {2,4};
link4[] = {2,7};
link5[] = {2,8};
link6[] = {2,9};
link7[] = {2,10};
link8[] = {2,22};
link9[] = {2,28};
link10[] = {2,30};
link11[] = {2,35};
link12[] = {2,37};
link13[] = {2,39};
link14[] = {2,41};
link15[] = {3,2};
link16[] = {4,11};
link17[] = {5,6};
link18[] = {5,28};
link19[] = {6,9};
link20[] = {7,11};
link21[] = {8,11};
link22[] = {9,20};
link23[] = {10,11};
link24[] = {11,12};
link25[] = {11,13};
link26[] = {12,19};
link27[] = {13,18};
link28[] = {14,16};
link29[] = {14,28};
link30[] = {16,9};
link31[] = {17,9};
link32[] = {18,14};
link33[] = {19,5};
link34[] = {20,9};
link35[] = {20,21};
link36[] = {21,2};
link37[] = {22,26};
link38[] = {23,24};
link39[] = {23,32};
link40[] = {24,33};
link41[] = {25,16};
link42[] = {26,27};
link43[] = {27,23};
link44[] = {28,29};
link45[] = {30,31};
link46[] = {31,6};
link47[] = {32,28};
link48[] = {33,34};
link49[] = {34,25};
link50[] = {35,36};
link51[] = {36,6};
link52[] = {37,38};
link53[] = {38,6};
link54[] = {39,40};
link55[] = {40,6};
link56[] = {41,18};
globals[] = {0.000000,0,0,0,0,640,480,1,97,6316128,1,-1245.638184,-468.917297,677.057495,-1069.864380,554,1246,1};
window[] = {0,0,0,-1,-1,1420,1278,2562,17,1,571};
*//*%FSM</HEAD>*/
class FSM
{
        fsmName = "opcom";
        class States
        {
                /*%FSM<STATE "INIT">*/
                class INIT
                {
                        name = "INIT";
                        itemno = 0;
                        init = /*%FSM<STATEINIT""">*/"private _OPCOM_status = ""PreInit"";" \n
                         "" \n
                         "private _busy = false;" \n
                         "private _exitFSM = false;" \n
                         "" \n
                         "private _OPCOM_HANDLER = _this select 0;" \n
                         "private _OBJECTIVES = [_OPCOM_HANDLER,""objectives"",[]] call ALiVE_fnc_HashGet;" \n
                         "private _OPCOM_FSM =  [_OPCOM_HANDLER,""OPCOM_FSM""] call ALiVE_fnc_HashGet;" \n
                         "private _TACOM_FSM =  [_OPCOM_HANDLER,""TACOM_FSM""] call ALiVE_fnc_HashGet;" \n
                         "" \n
                         "private _debug = [_OPCOM_HANDLER,""debug"",false] call ALiVE_fnc_HashGet;" \n
                         "private _side = [_OPCOM_HANDLER,""side"",""EAST""] call ALiVE_fnc_HashGet;" \n
                         "private _factions = [_OPCOM_HANDLER,""factions"",[""OPF_F""]] call ALiVE_fnc_HashGet;" \n
                         "private _sidesEnemy = [_OPCOM_HANDLER,""sidesenemy"",[""EAST""]] call ALiVE_fnc_HashGet;" \n
                         "private _sidesFriendly = [_OPCOM_HANDLER,""sidesfriendly"",[""WEST""]] call ALiVE_fnc_HashGet;" \n
                         "private _controltype = [_OPCOM_HANDLER, ""controltype"",""invasion""] call ALiVE_fnc_HashGet;" \n
                         "private _simultanObjectives = [_OPCOM_HANDLER, ""simultanobjectives"",10] call ALiVE_fnc_HashGet;" \n
                         "private _reinforcementRatio = [_OPCOM_HANDLER, ""reinforcements"",0.9] call ALiVE_fnc_HashGet;" \n
                         "" \n
                         "private _pause = false;" \n
                         "" \n
                         "private _OPCOM_QUEUE = [];" \n
                         "private _targets = [];" \n
                         "private _cycleTime = 300;" \n
                         "private _timestamp = time;" \n
                         "private _lastanalyze = 0;" \n
                         "private _orderFailed = false;" \n
                         "private _colorside = ""ColorRed"";" \n
                         "" \n
                         "private _OPCOM_SKIP_OBJECTIVES = [];" \n
                         "" \n
                         "switch (_side) do {" \n
                         "    case (""WEST"") : {_colorside = ""ColorBlue""};" \n
                         "    case (""EAST"") : {_colorside = ""ColorRed""};" \n
                         "    case (""GUER"") : {_colorside = ""ColorGreen""};" \n
                         "};" \n
                         "" \n
                         "// debug ---------------------------------------" \n
                         "if(_debug) then {" \n
                         "    [ ""OPCOM INIT""] call ALIVE_fnc_dumpR;" \n
                         "    //[true] call ALIVE_fnc_timer;" \n
                         "};" \n
                         "// debug ---------------------------------------" \n
                         "" \n
                         "/*" \n
                         "//Mock targets for testing purposes" \n
                         "" \n
                         "                        // markers m_0 -  m_15" \n
                         "                        _objectives_unsorted = [];" \n
                         "                        for ""_i"" from 0 to 15 do {" \n
                         "                            _objectives_unsorted pushback [(getmarkerpos format[""m_%1"",_i]),150,""civilian"",25];" \n
                         "                        };" \n
                         "" \n
                         "                        _objectives = [_objectives_unsorted,[],{([_OPCOM_HANDLER,""position""] call ALiVE_fnc_HashGet) distance (_x select 0)},""ASCEND""] call ALiVE_fnc_SortBy;" \n
                         "                        " \n
                         "                        //Create objectives for OPCOM and set it on the OPCOM Handler " \n
                         "                        //GetObjectivesByPriority" \n
                         "                        {" \n
                         "                                    _target = [nil, ""createhashobject""] call ALIVE_fnc_OPCOM;" \n
                         "                        " \n
                         "                                    _id = format[""OPCOM_objective_%1_%2"",_side,_foreachIndex]; [_target, ""objectiveID"",_id] call ALIVE_fnc_HashSet;" \n
                         "                                    _pos = _x select 0; [_target, ""center"",_pos] call ALIVE_fnc_HashSet;" \n
                         "                                    _size = _x select 1; [_target, ""size"",_size] call ALIVE_fnc_HashSet;" \n
                         "                                    _type = _x select 2; [_target, ""objectiveType"",_type] call ALIVE_fnc_HashSet;" \n
                         "                                    _priority = _x select 3; [_target, ""priority"",_priority] call ALIVE_fnc_HashSet;" \n
                         "                                    _opcom_state = ""unassigned""; [_target, ""opcom_state"",_opcom_state] call ALIVE_fnc_HashSet;" \n
                         "                        " \n
                         "                                    if  (_debug) then {" \n
                         "                                        _m = createMarkerLocal [_id, _pos];" \n
                         "                                        _m setMarkerShapeLocal ""RECTANGLE"";" \n
                         "                                        _m setMarkerSizeLocal [_size, _size];" \n
                         "                                        _m setMarkerTypeLocal ""hd_dot"";" \n
                         "                                        _m setMarkerColorLocal ""ColorWhite"";" \n
                         "                                        //_m setMarkerTextLocal format[""Objective Priority %1"",_foreachIndex];" \n
                         "                                    };" \n
                         "                    " \n
                         "                                    _objectives set [_forEachIndex, _target];" \n
                         "                         } foreach _objectives;" \n
                         "" \n
                         "_objectives = [_OPCOM_HANDLER,""objectives"",_objectives] call ALiVE_fnc_OPCOM;" \n
                         "*/" \n
                         "" \n
                         "// debug ---------------------------------------" \n
                         "if(_debug) then {" \n
                         "    [ ""OPCOM INIT COMPLETE ""] call ALIVE_fnc_dumpR;" \n
                         "    [ ""OPCOM Objectives: %1"",_objectives] call ALIVE_fnc_dump;" \n
                         "    //_objectives call ALIVE_fnc_inspectHash; // bugged??" \n
                         "    //[] call ALIVE_fnc_timer;" \n
                         "};" \n
                         "// debug ---------------------------------------"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "INIT_COMPLETE">*/
                                class INIT_COMPLETE
                                {
                                        itemno = 1;
                                        priority = 0.000000;
                                        to="INITIALIZE";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/"_OPCOM_FSM =  [_OPCOM_HANDLER,""OPCOM_FSM""] call ALiVE_fnc_HashGet;" \n
                                         "_TACOM_FSM =  [_OPCOM_HANDLER,""TACOM_FSM""] call ALiVE_fnc_HashGet;"/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"!(isnil ""_OPCOM_FSM"") && !(isnil ""_TACOM_FSM"") && {_OPCOM_FSM > 0 && _TACOM_FSM > 0}"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "ANALYZE">*/
                class ANALYZE
                {
                        name = "ANALYZE";
                        itemno = 2;
                        init = /*%FSM<STATEINIT""">*/"_OPCOM_status = ""switch"";" \n
                         "_timestamp = time;" \n
                         "" \n
                         "private [""_target"",""_targetId"",""_obj"",""_attack"",""_defend"",""_reserve"",""_custom"",""_qrf"",""_recon"",""_oca"",""_operation"",""_priorities"",""_data_operation"",""_data_value"",""_targetsWithState"",""_OPCOM_ACTION"",""_targetOccupation"",""_analyze"",""_data""];" \n
                         "" \n
                         "_busy = true;" \n
                         "" \n
                         "private _recon = nil;" \n
                         "private _oca = nil;" \n
                         "private _target = nil;" \n
                         "private _analyze = nil;" \n
                         "private _attack = nil;" \n
                         "private _defend = nil;" \n
                         "private _reserve = nil;" \n
                         "private _custom = nil;" \n
                         "" \n
                         "private _skipObjective = false;" \n
                         "" \n
                         "_data_operation = nil;" \n
                         "_data_value = nil;" \n
                         "" \n
                         "if (count _OPCOM_QUEUE > 0) then {" \n
                         "    _OPCOM_ACTION = _OPCOM_QUEUE select 0;" \n
                         "    _OPCOM_QUEUE set [0,""x""];" \n
                         "    _OPCOM_QUEUE = _OPCOM_QUEUE - [""x""];" \n
                         "};" \n
                         "" \n
                         "_timeout = ((isnil ""_OPCOM_ACTION"") && {(time - _lastAnalyze) >= _cycleTime});" \n
                         "if (_timeout) then {_OPCOM_ACTION = [""analyze"",nil]};" \n
                         "" \n
                         "//start operating if data was received" \n
                         "if !(isnil ""_OPCOM_ACTION"") then {" \n
                         "    _DATA_OPERATION = _OPCOM_ACTION select 0;" \n
                         "    _DATA_VALUE = _OPCOM_ACTION select 1;" \n
                         "    _OPCOM_ACTION = nil;" \n
                         "" \n
                         "    //select operation type" \n
                         "    switch (_DATA_OPERATION) do {" \n
                         "        case (""init"") : {" \n
                         "" \n
                         "                    // debug ---------------------------------------" \n
                         "                    if (_debug) then {" \n
                         "                        [_OPCOM_HANDLER,""OPCOM_monitor"",true] call AliVE_fnc_OPCOM;" \n
                         "                    };" \n
                         "             // debug ---------------------------------------" \n
                         "" \n
                         "            _OPCOM_DATA= [""analyze"",nil];" \n
                         "" \n
                         "            // debug ---------------------------------------" \n
                         "            if(_debug) then { [""OPCOM initialized, %1!"",_DATA_VALUE] call ALIVE_fnc_dumpR; };" \n
                         "            // debug ---------------------------------------" \n
                         "" \n
                         "            _busy = false;" \n
                         "        };" \n
                         "" \n
                         "        case (""analyze"") : {" \n
                         "            private[""_orders"",""_result"",""_targetsWithState""];" \n
                         "" \n
                         "            //Check TACOMs Data value (starting attack if you pass nil to it, see below)" \n
                         "            if !(isnil ""_DATA_VALUE"") then {" \n
                         "                switch (_DATA_VALUE) do {" \n
                         "                    case (""no groups available"") : {};" \n
                         "                    case (""analysis""): {_analyze = ""analysis""};" \n
                         "                    default {};" \n
                         "                };" \n
                         "            };" \n
                         "" \n
                         "            //AnalyzeClusterOccupation" \n
                         "            _targetOccupation = [_OPCOM_HANDLER,""clusteroccupation"",[]] call ALiVE_fnc_HashGet;" \n
                         "            if (((count _targetOccupation > 0) && {time - (_targetOccupation select 4) > _cycleTime}) || {count _targetOccupation == 0}) then {_analyze = ""analysis""};" \n
                         "" \n
                         "            //Exit if analysis should happen" \n
                         "            if !(isnil ""_analyze"") exitwith {_busy = false};" \n
                         "" \n
                         "            //Exit if reeinforcements need to be requested" \n
                         "            if !(isnil ""_reinforce"") exitwith {_busy = false};" \n
                         "" \n
                         "            //Get objectives" \n
                         "            _obj = ([_OPCOM_HANDLER,""objectives"",[]] call AliVE_fnc_HashGet);" \n
                         "" \n
                         "            _un = [];" \n
                         "            _at = [];" \n
                         "            _def = [];" \n
                         "            _res = [];" \n
                         "            _idl = [];" \n
                         "            _active = 0;" \n
                         "" \n
                         "            {" \n
                         "                private _objectiveID = [_x, ""objectiveID""] call AliVE_fnc_HashGet;" \n
                         "" \n
                         "                if !(_objectiveID in _OPCOM_SKIP_OBJECTIVES) then {" \n
                         "                    private [""_state""];" \n
                         "" \n
                         "                    _state = _x select 2 select 5;" \n
                         "" \n
                         "                    switch (_state) do {" \n
                         "                        case (""unassigned"") : {_un pushback _x};" \n
                         "                        case (""attack"") : {_at pushback _x};" \n
                         "                        case (""defend"") : {_def pushback _x};" \n
                         "                        case (""reserve"") : {_res pushback _x};" \n
                         "                        case (""idle"") : {_idl pushback _x};" \n
                         "                    };" \n
                         "" \n
                         "                    if (_state in [""attacking"",""defending""]) then {_active = _active + 1};" \n
                         "                };" \n
                         "            } foreach _obj;" \n
                         "" \n
                         "            //AnalyzeResults - prepare orders" \n
                         "" \n
                         "                switch (_controltype) do {" \n
                         "                    case (""invasion"") : {" \n
                         "" \n
                         "                        _priorities = [" \n
                         "                            [(count _res > 0),""reserve""]," \n
                         "                            [(count _un > 0),""unassigned""]," \n
                         "                            [(count _at > 0) && (_active <= _simultanObjectives),""attack""]," \n
                         "                            [(count _def > 0),""defend""]" \n
                         "                        ];" \n
                         "                    };" \n
                         "        " \n
                         "                    case (""occupation"") : {" \n
                         "                        _priorities = [" \n
                         "                            [(count _res > 0),""reserve""]," \n
                         "                            [(count _def > 0),""defend""]," \n
                         "                            [(count _at > 0),""attack""]," \n
                         "                            [(count _un > 0),""unassigned""]" \n
                         "                        ];" \n
                         "                    };" \n
                         "                };" \n
                         "" \n
                         "                        {" \n
                         "                            if (_x select 0) exitwith {" \n
                         "                                _targetsWithState = (_x select 1);" \n
                         "                            };" \n
                         "                        } foreach _priorities;" \n
                         "" \n
                         "            //Select orders and execute" \n
                         "                        if !(isnil ""_targetsWithState"") then {" \n
                         "                    _orders = [_OPCOM_HANDLER,""selectordersbystate"",_targetsWithState] call ALiVE_fnc_OPCOM;" \n
                         "                    " \n
                         "                    if !(isnil ""_orders"") then {" \n
                         "                        private [""_o""];" \n
                         "" \n
                         "                        _o = _orders select 1;" \n
                         "                        _operation = [_o,""opcom_orders""] call AliVE_fnc_HashGet;" \n
                         "" \n
                         "                        switch (_operation) do {" \n
                         "                            case (""attack"") : {" \n
                         "                                _attack = _o;" \n
                         "                            };" \n
                         "                            case (""defend"") : {" \n
                         "                                _defend = _o;" \n
                         "                            };" \n
                         "                            case (""reserve"") : {" \n
                         "                                _reserve = _o;" \n
                         "                            };" \n
                         "                            //Custom" \n
                         "                        };" \n
                         "                    // debug ---------------------------------------" \n
                         "                        if(_debug) then { [""OPCOM orders TACOM to %1 target %2"",([_o,""opcom_orders""] call AliVE_fnc_HashGet),([_o,""objectiveID""] call AliVE_fnc_HashGet)] call ALIVE_fnc_dumpR; };" \n
                         "                    // debug ---------------------------------------" \n
                         "                    } else {" \n
                         "                                _busy = false;" \n
                         "                            };" \n
                         "                } else {" \n
                         "                    _busy = false;" \n
                         "                };" \n
                         "        };" \n
                         "" \n
                         "        //Handle TACOM confirmation by state" \n
                         "        case (""confirmed"") : {" \n
                         "            _confirmed = _DATA_VALUE select 0;" \n
                         "            _information = _DATA_VALUE select 1;" \n
                         "" \n
                         "            _target = _information select 0;" \n
                         "            _return = _information select 1;" \n
                         "" \n
                         "				_faction = selectRandom _factions;" \n
                         "				_enemySide = selectRandom _sidesEnemy;" \n
                         "" \n
                         "            _operation = [_target,""opcom_orders""] call AliVE_fnc_HashGet;" \n
                         "            _pos = [_target,""center""] call AliVE_fnc_HashGet;" \n
                         "				_targetId = [_target,""objectiveID""] call AliVE_fnc_HashGet;" \n
                         "" \n
                         "            if (_confirmed) then {" \n
                         "                switch (_operation) do {" \n
                         "                    case (""attack"") : {" \n
                         "                        [_target,""opcom_state"",""attacking""] call AliVE_fnc_HashSet;" \n
                         "" \n
                         "								if ([_side,[""attacking""]] call ALIVE_fnc_OPCOMgetHighestPrioObjective == _targetId) then {" \n
                         "									_targets = [_pos, 300, [_enemySide,""entity""],true] call ALIVE_fnc_getNearProfiles;" \n
                         "									[_side,_faction,""CaptureObjective"",_targets,""OPCOM"",true] call ALiVE_fnc_taskRequest;" \n
                         "								};" \n
                         "" \n
                         "								//Assist TACOM by sending air recon after TACOMs attack confirmation" \n
                         "								_OPCOM_DATA = [""RECON"",[[_target,""objectiveID"",""""] call AliVE_fnc_HashGet]];" \n
                         "                    };" \n
                         "                    case (""defend"") : {" \n
                         "                        [_target,""opcom_state"",""defending""] call AliVE_fnc_HashSet;" \n
                         "" \n
                         "                			//Trigger new OPCOM analysis after TACOM confirmation including TACOMs answer" \n
                         "                			_OPCOM_DATA = [""analyze"",nil];" \n
                         "" \n
                         "                    };" \n
                         "                    case (""reserve"") : {" \n
                         "                        [_target,""opcom_state"",""reserving""] call AliVE_fnc_HashSet;" \n
                         "" \n
                         "                			//Trigger new OPCOM analysis after TACOM confirmation including TACOMs answer" \n
                         "                			_OPCOM_DATA = [""analyze"",nil];" \n
                         "                    };" \n
                         "                    default {" \n
                         "                			//Trigger new OPCOM analysis after TACOM confirmation including TACOMs answer" \n
                         "                			_OPCOM_DATA = [""analyze"",nil];" \n
                         "						  };" \n
                         "                };" \n
                         "" \n
                         "                // debug ---------------------------------------" \n
                         "                if(_debug) then { [""TACOM message received: %1 %2! Details: %3!"",([_target,""opcom_state""] call AliVE_fnc_HashGet),([_target,""objectiveID""] call AliVE_fnc_HashGet),_return] call ALIVE_fnc_dumpR; };" \n
                         "                // debug ---------------------------------------" \n
                         "" \n
                         "            }  else {" \n
                         "                _OPCOM_SKIP_OBJECTIVES pushBack ([_target, ""objectiveID""] call AliVE_fnc_HashGet);" \n
                         "                _OPCOM_DATA = [""analyze"", nil];" \n
                         "                _skipObjective = true;" \n
                         "" \n
                         "                [_target,""opcom_orders"",""none""] call ALiVE_fnc_HashSet;" \n
                         "" \n
                         "                // debug ---------------------------------------" \n
                         "                if(_debug) then {" \n
                         "                    [""TACOM message received: %1"", _return] call ALIVE_fnc_dumpR;" \n
                         "                    [""OPCOM skipping objective %1 for this cycle"", [_target, ""objectiveID""] call AliVE_fnc_HashGet] call ALIVE_fnc_dumpR;" \n
                         "                };" \n
                         "                // debug ---------------------------------------" \n
                         "" \n
                         "            };" \n
                         "            _busy = false;" \n
                         "        };" \n
                         "" \n
                         "        case (""QRF"") : {" \n
                         "		_target = _DATA_VALUE select 0;" \n
                         "" \n
                         "		// debug ---------------------------------------" \n
                         "		 if(_debug) then { [""OPCOM retrieved request for QRF on %1!"",_target] call ALIVE_fnc_dumpR; };" \n
                         "		 // debug ---------------------------------------" \n
                         "		" \n
                         "		_qrf = [""air"",_target];" \n
                         "	 };" \n
                         "" \n
                         "        case (""RECON"") : {" \n
                         "		_target = _DATA_VALUE select 0;" \n
                         "" \n
                         "		// debug ---------------------------------------" \n
                         "		 if(_debug) then { [""OPCOM retrieved request for RECON on %1!"",_target] call ALIVE_fnc_dumpR; };" \n
                         "		 // debug ---------------------------------------" \n
                         "		" \n
                         "		_recon = [""air"",_target];" \n
                         "	 };" \n
                         "        case (""OCA"") : {" \n
                         "		_target = _DATA_VALUE select 0;" \n
                         "" \n
                         "		// debug ---------------------------------------" \n
                         "		 if(_debug) then { [""OPCOM retrieved request for OCA  on %1!"",_target] call ALIVE_fnc_dumpR; };" \n
                         "		 // debug ---------------------------------------" \n
                         "		" \n
                         "		_oca = [""air"",_target];" \n
                         "	 };" \n
                         "        case (""custom"") : {_custom = _DATA_VALUE};" \n
                         "        default {};" \n
                         "    };" \n
                         "" \n
                         "};" \n
                         "" \n
                         "_lastAnalyze = time;" \n
                         ""/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "EXIT">*/
                                class EXIT
                                {
                                        itemno = 28;
                                        priority = 99.000000;
                                        to="END";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"_exitFSM"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "ATTACK_Condition">*/
                                class ATTACK_Condition
                                {
                                        itemno = 4;
                                        priority = 5.000000;
                                        to="ORDER_TACOM";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"!(isnil ""_attack"");"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "DEFEND_condition">*/
                                class DEFEND_condition
                                {
                                        itemno = 7;
                                        priority = 4.000000;
                                        to="ORDER_TACOM";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"!(isnil ""_defend"");"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "RESERVE_conditio">*/
                                class RESERVE_conditio
                                {
                                        itemno = 8;
                                        priority = 3.000000;
                                        to="ORDER_TACOM";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"!(isnil ""_reserve"");"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "CUSTOM_condition">*/
                                class CUSTOM_condition
                                {
                                        itemno = 10;
                                        priority = 2.000000;
                                        to="ORDER_TACOM";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"!(isnil ""_custom"");"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "OPCOM_FEEDER">*/
                                class OPCOM_FEEDER
                                {
                                        itemno = 3;
                                        priority = 1.000000;
                                        to="ANALYZE";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"time - _lastAnalyze > _cycleTime"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "OPCOM_RECEIVER">*/
                                class OPCOM_RECEIVER
                                {
                                        itemno = 9;
                                        priority = 1.000000;
                                        to="COLLECT_TO_QUEUE";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/"_failsafe = false; _failsafe = (time - _timestamp) > _cycleTime;" \n
                                         ""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"_OPCOM_status = ""waiting for data""; " \n
                                         "" \n
                                         "//See PreCondition and Action for _failsafe and _pause" \n
                                         "(!(isnil ""_OPCOM_DATA"") || {isnil ""_OPCOM_DATA"" && {count _OPCOM_QUEUE > 0}} || {_orderFailed} || {_failsafe}) && {!_pause};"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/"if (_orderFailed || {_failsafe}) then {" \n
                                         "	_orderFailed = false;" \n
                                         "	_failsafe = false;" \n
                                         "	_OPCOM_DATA = [""analyze"",nil];" \n
                                         "};" \n
                                         "" \n
                                         "_busy = false;"/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "ANALYZE_Conditio">*/
                                class ANALYZE_Conditio
                                {
                                        itemno = 22;
                                        priority = 0.000000;
                                        to="PERFORM_CLEANUP";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"!(isnil ""_analyze"");"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "REEINFORCE_Condi">*/
                                class REEINFORCE_Condi
                                {
                                        itemno = 30;
                                        priority = 0.000000;
                                        to="REQUEST_REEINFOR";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"!(isnil ""_reinforce"");"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "QRF_Conditions">*/
                                class QRF_Conditions
                                {
                                        itemno = 35;
                                        priority = 0.000000;
                                        to="REQUEST_QRF";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"!(isnil ""_qrf"");"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "RECON_Conditions">*/
                                class RECON_Conditions
                                {
                                        itemno = 37;
                                        priority = 0.000000;
                                        to="REQUEST_RECON";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"!(isnil ""_recon"");"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "OCA_Conditions">*/
                                class OCA_Conditions
                                {
                                        itemno = 39;
                                        priority = 0.000000;
                                        to="REQUEST_OCA";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"!(isnil ""_oca"");"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "Skip_Objective">*/
                                class Skip_Objective
                                {
                                        itemno = 41;
                                        priority = 0.000000;
                                        to="NOT_BUSY";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"_skipObjective"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "ORDER_TACOM">*/
                class ORDER_TACOM
                {
                        name = "ORDER_TACOM";
                        itemno = 11;
                        init = /*%FSM<STATEINIT""">*/"_OPCOM_status = ""order"";" \n
                         "_timestamp = time;" \n
                         "" \n
                         "_operation = nil;" \n
                         "" \n
                         "//prepare transmission" \n
                         "if !(isnil ""_attack"") then {_operation = ""attack""};" \n
                         "if !(isnil ""_defend"") then {_operation = ""defend""};" \n
                         "if !(isnil ""_reserve"") then {_operation = ""reserve""};" \n
                         "if !(isnil ""_custom"") then {_operation = ""custom""};" \n
                         "" \n
                         "//transmit" \n
                         "switch (_operation) do {" \n
                         "        case ( ""attack"") : {    _TACOM_FSM setFSMVariable [""_TACOM_DATA"",[""analyze"",_attack]];};" \n
                         "        case (""defend"") : {_TACOM_FSM setFSMVariable [""_TACOM_DATA"",[""analyze"",_defend]];};" \n
                         "        case (""reserve"") : {_TACOM_FSM setFSMVariable [""_TACOM_DATA"",[""analyze"",_reserve]];};" \n
                         "        case (""custom"") : {};" \n
                         "        default {};" \n
                         "};"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "TACOM_NOT_CONFIR">*/
                                class TACOM_NOT_CONFIR
                                {
                                        itemno = 13;
                                        priority = 0.000000;
                                        to="NOT_BUSY";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/"_orderFailed = false; _orderFailed = (time - _timestamp) > 10;"/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"(!(isnil ""_OPCOM_DATA"") && {(_OPCOM_DATA select 0) == ""confirmed""} && {!((_OPCOM_DATA select 1) select 0)}) || {_orderFailed}"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "TACOM_CONFIRM">*/
                                class TACOM_CONFIRM
                                {
                                        itemno = 12;
                                        priority = 0.000000;
                                        to="NOT_BUSY_1";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"!(isnil ""_OPCOM_DATA"") && {(_OPCOM_DATA select 0) == ""confirmed""} && {(_OPCOM_DATA select 1) select 0};"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "INITIALIZE">*/
                class INITIALIZE
                {
                        name = "INITIALIZE";
                        itemno = 17;
                        init = /*%FSM<STATEINIT""">*/"_OPCOM_status = ""Init"";" \n
                         "" \n
                         "_OPCOM_DATA = [""init"",true];"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "OPCOM_RECEIVER">*/
                                class OPCOM_RECEIVER
                                {
                                        itemno = 9;
                                        priority = 1.000000;
                                        to="COLLECT_TO_QUEUE";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/"_failsafe = false; _failsafe = (time - _timestamp) > _cycleTime;" \n
                                         ""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"_OPCOM_status = ""waiting for data""; " \n
                                         "" \n
                                         "//See PreCondition and Action for _failsafe and _pause" \n
                                         "(!(isnil ""_OPCOM_DATA"") || {isnil ""_OPCOM_DATA"" && {count _OPCOM_QUEUE > 0}} || {_orderFailed} || {_failsafe}) && {!_pause};"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/"if (_orderFailed || {_failsafe}) then {" \n
                                         "	_orderFailed = false;" \n
                                         "	_failsafe = false;" \n
                                         "	_OPCOM_DATA = [""analyze"",nil];" \n
                                         "};" \n
                                         "" \n
                                         "_busy = false;"/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "NOT_BUSY">*/
                class NOT_BUSY
                {
                        name = "NOT_BUSY";
                        itemno = 18;
                        init = /*%FSM<STATEINIT""">*/"_OPCOM_status = ""reset"";" \n
                         "_timestamp = time;" \n
                         "" \n
                         "_busy = false;"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "EXIT">*/
                                class EXIT
                                {
                                        itemno = 28;
                                        priority = 99.000000;
                                        to="END";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"_exitFSM"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "OPCOM_RECEIVER">*/
                                class OPCOM_RECEIVER
                                {
                                        itemno = 9;
                                        priority = 1.000000;
                                        to="COLLECT_TO_QUEUE";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/"_failsafe = false; _failsafe = (time - _timestamp) > _cycleTime;" \n
                                         ""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"_OPCOM_status = ""waiting for data""; " \n
                                         "" \n
                                         "//See PreCondition and Action for _failsafe and _pause" \n
                                         "(!(isnil ""_OPCOM_DATA"") || {isnil ""_OPCOM_DATA"" && {count _OPCOM_QUEUE > 0}} || {_orderFailed} || {_failsafe}) && {!_pause};"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/"if (_orderFailed || {_failsafe}) then {" \n
                                         "	_orderFailed = false;" \n
                                         "	_failsafe = false;" \n
                                         "	_OPCOM_DATA = [""analyze"",nil];" \n
                                         "};" \n
                                         "" \n
                                         "_busy = false;"/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "NOT_BUSY_1">*/
                class NOT_BUSY_1
                {
                        name = "NOT_BUSY_1";
                        itemno = 19;
                        init = /*%FSM<STATEINIT""">*/"_OPCOM_status = ""reset"";" \n
                         "_timestamp = time;" \n
                         "" \n
                         "_busy = false;"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "EXIT">*/
                                class EXIT
                                {
                                        itemno = 28;
                                        priority = 99.000000;
                                        to="END";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"_exitFSM"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "OPCOM_RECEIVER">*/
                                class OPCOM_RECEIVER
                                {
                                        itemno = 9;
                                        priority = 1.000000;
                                        to="COLLECT_TO_QUEUE";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/"_failsafe = false; _failsafe = (time - _timestamp) > _cycleTime;" \n
                                         ""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"_OPCOM_status = ""waiting for data""; " \n
                                         "" \n
                                         "//See PreCondition and Action for _failsafe and _pause" \n
                                         "(!(isnil ""_OPCOM_DATA"") || {isnil ""_OPCOM_DATA"" && {count _OPCOM_QUEUE > 0}} || {_orderFailed} || {_failsafe}) && {!_pause};"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/"if (_orderFailed || {_failsafe}) then {" \n
                                         "	_orderFailed = false;" \n
                                         "	_failsafe = false;" \n
                                         "	_OPCOM_DATA = [""analyze"",nil];" \n
                                         "};" \n
                                         "" \n
                                         "_busy = false;"/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "COLLECT_TO_QUEUE">*/
                class COLLECT_TO_QUEUE
                {
                        name = "COLLECT_TO_QUEUE";
                        itemno = 20;
                        init = /*%FSM<STATEINIT""">*/"_OPCOM_status = ""collect data to queue"";" \n
                         "_timestamp = time;" \n
                         "" \n
                         "if !(isnil ""_OPCOM_DATA"") then {" \n
                         "	_OPCOM_QUEUE pushback _OPCOM_DATA;" \n
                         "	_OPCOM_DATA = nil;" \n
                         "};"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "ENTRIES_IN_QUEUE">*/
                                class ENTRIES_IN_QUEUE
                                {
                                        itemno = 21;
                                        priority = 2.000000;
                                        to="ANALYZE";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"((count _OPCOM_QUEUE > 0) || time - _lastAnalyze > _cycleTime) && ((time - _lastAnalyze > 0.5) && !(_busy))"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "OPCOM_RECEIVER">*/
                                class OPCOM_RECEIVER
                                {
                                        itemno = 9;
                                        priority = 1.000000;
                                        to="COLLECT_TO_QUEUE";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/"_failsafe = false; _failsafe = (time - _timestamp) > _cycleTime;" \n
                                         ""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"_OPCOM_status = ""waiting for data""; " \n
                                         "" \n
                                         "//See PreCondition and Action for _failsafe and _pause" \n
                                         "(!(isnil ""_OPCOM_DATA"") || {isnil ""_OPCOM_DATA"" && {count _OPCOM_QUEUE > 0}} || {_orderFailed} || {_failsafe}) && {!_pause};"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/"if (_orderFailed || {_failsafe}) then {" \n
                                         "	_orderFailed = false;" \n
                                         "	_failsafe = false;" \n
                                         "	_OPCOM_DATA = [""analyze"",nil];" \n
                                         "};" \n
                                         "" \n
                                         "_busy = false;"/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "PERFORM_ANALYSIS">*/
                class PERFORM_ANALYSIS
                {
                        name = "PERFORM_ANALYSIS";
                        itemno = 23;
                        init = /*%FSM<STATEINIT""">*/"private [""_clusterOccupationAnalysis"",""_troopsAnalysis"",""_enemyScan""];" \n
                         "" \n
                         "switch (_analyze) do {" \n
                         "    case (""analysis"") : {" \n
                         "        //ANALYSISDONE = false; [_OPCOM_HANDLER,_sidesFriendly,_sidesEnemy] execFSM ""\x\alive\addons\mil_opcom\analyze.fsm"";" \n
                         "        _clusterOccupationAnalysis = [_OPCOM_HANDLER,""analyzeclusteroccupation"",[_sidesFriendly,_sidesEnemy]] spawn ALiVE_fnc_OPCOM;" \n
                         "        _troopsAnalysis = [_OPCOM_HANDLER,""scantroops""] spawn ALiVE_fnc_OPCOM;" \n
                         "        _enemyScan = [_OPCOM_HANDLER,""scanFriendliesForNearEnemies""] spawn ALIVE_fnc_OPCOM;" \n
                         "	};" \n
                         "};"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "EXIT">*/
                                class EXIT
                                {
                                        itemno = 28;
                                        priority = 99.000000;
                                        to="END";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"_exitFSM"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                                /*%FSM<LINK "ANALYSIS_DONE">*/
                                class ANALYSIS_DONE
                                {
                                        itemno = 24;
                                        priority = 0.000000;
                                        to="PERFORM_POSTANAL";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"scriptdone _troopsAnalysis && " \n
                                         "scriptdone _clusterOccupationAnalysis && " \n
                                         "scriptdone _enemyScan"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "RESET">*/
                class RESET
                {
                        name = "RESET";
                        itemno = 25;
                        init = /*%FSM<STATEINIT""">*/"_OPCOM_status = ""reset"";" \n
                         "_timestamp = time;" \n
                         "" \n
                         "// debug ---------------------------------------" \n
                         "if (_debug) then {" \n
                         "    [""OPCOM analysis finished""] call ALIVE_fnc_dump;" \n
                         "    [] call ALIVE_fnc_timer;" \n
                         "    [""---------------------""] call ALIVE_fnc_dump;" \n
                         "" \n
                         "    private [""_obj""];" \n
                         "    _obj = [_OPCOM_HANDLER,""objectives"",[]] call ALiVE_fnc_HashGet;" \n
                         "" \n
                         "    [" \n
                         "        ""ALiVE OPCOM %9 analyzed: Total of %1 targets | unassigned: %2 | assigned: %3 | completed: %4 | defending: %5 | secured: %6 | internal: %7 | others: %8""," \n
                         "        count _obj," \n
                         "        ({([_x,""opcom_state""] call AliVE_fnc_HashGet) == ""unassigned""} count _obj), " \n
                         "        ({([_x,""opcom_state""] call AliVE_fnc_HashGet) == ""attacking""} count _obj)," \n
                         "        ({([_x,""opcom_state""] call AliVE_fnc_HashGet) == ""reserving""} count _obj)," \n
                         "        ({([_x,""opcom_state""] call AliVE_fnc_HashGet) == ""defending""} count _obj)," \n
                         "        ({([_x,""opcom_state""] call AliVE_fnc_HashGet) == ""idle""} count _obj)," \n
                         "        ({([_x,""opcom_state""] call AliVE_fnc_HashGet) == ""internal""} count _obj)," \n
                         "        ({!(([_x,""opcom_state""] call AliVE_fnc_HashGet) in [""internal"",""idle"",""defending"",""reserving"",""attacking"",""unassigned""])} count _obj)," \n
                         "        _side" \n
                         "    ] call ALIVE_fnc_dumpR;" \n
                         "" \n
                         "    if ((count _OPCOM_SKIP_OBJECTIVES) > 0) then {" \n
                         "        {" \n
                         "            [" \n
                         "                ""ALiVE OPCOM %1: Reconsidering skipped objective %2""," \n
                         "                _side," \n
                         "                _x" \n
                         "            ] call ALiVE_fnc_dumpR;" \n
                         "        } forEach _OPCOM_SKIP_OBJECTIVES;" \n
                         "    };" \n
                         "};" \n
                         "// debug ---------------------------------------" \n
                         "" \n
                         "_OPCOM_SKIP_OBJECTIVES = [];" \n
                         "_OPCOM_DATA = [""analyze"", nil];" \n
                         "_busy = false;" \n
                         ""/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "OPCOM_RECEIVER">*/
                                class OPCOM_RECEIVER
                                {
                                        itemno = 9;
                                        priority = 1.000000;
                                        to="COLLECT_TO_QUEUE";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/"_failsafe = false; _failsafe = (time - _timestamp) > _cycleTime;" \n
                                         ""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"_OPCOM_status = ""waiting for data""; " \n
                                         "" \n
                                         "//See PreCondition and Action for _failsafe and _pause" \n
                                         "(!(isnil ""_OPCOM_DATA"") || {isnil ""_OPCOM_DATA"" && {count _OPCOM_QUEUE > 0}} || {_orderFailed} || {_failsafe}) && {!_pause};"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/"if (_orderFailed || {_failsafe}) then {" \n
                                         "	_orderFailed = false;" \n
                                         "	_failsafe = false;" \n
                                         "	_OPCOM_DATA = [""analyze"",nil];" \n
                                         "};" \n
                                         "" \n
                                         "_busy = false;"/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "PERFORM_CLEANUP">*/
                class PERFORM_CLEANUP
                {
                        name = "PERFORM_CLEANUP";
                        itemno = 26;
                        init = /*%FSM<STATEINIT""">*/"_OPCOM_status = ""analysis"";" \n
                         "" \n
                         "// debug ---------------------------------------" \n
                         "            if(_debug) then {" \n
                         "                [""---------------------""] call ALIVE_fnc_dump;" \n
                         "                [""OPCOM analysis started""] call ALIVE_fnc_dumpR;" \n
                         "                [true] call ALIVE_fnc_timer;" \n
                         "            };" \n
                         "// debug ---------------------------------------    " \n
                         "" \n
                         "private [""_cleanup""];" \n
                         "" \n
                         "_cleanup = [_OPCOM_HANDLER] spawn {[_this select 0,""cleanupduplicatesections""] call ALiVE_fnc_OPCOM};"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "CLEANUP_DONE">*/
                                class CLEANUP_DONE
                                {
                                        itemno = 27;
                                        priority = 0.000000;
                                        to="PERFORM_ANALYSIS";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"scriptdone _cleanup;"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "END">*/
                class END
                {
                        name = "END";
                        itemno = 29;
                        init = /*%FSM<STATEINIT""">*/"[_OPCOM_HANDLER,""OPCOM_FSM""] call ALiVE_fnc_HashRem;"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "REQUEST_REEINFOR">*/
                class REQUEST_REEINFOR
                {
                        name = "REQUEST_REEINFOR";
                        itemno = 31;
                        init = /*%FSM<STATEINIT""">*/"_OPCOM_status = ""reinforce"";" \n
                         "_timestamp = time;" \n
                         "" \n
                         "if ([""ALiVE_MIL_LOGISTICS""] call ALiVE_fnc_isModuleAvailable) then {" \n
                         "" \n
                         "    private [""_position"",""_forceMakeup"",""_forceMakeupAir"",""_event"",""_eventID"",""_base""];" \n
                         "    " \n
                         "    _base = [_OPCOM_HANDLER,""findReinforcementBase""] call ALiVE_fnc_OPCOM;" \n
                         "" \n
                         "    if (isnil ""_base"") exitwith {" \n
                         "        if (_debug) then {[""ALiVE OPCOM - Requesting reinforcments for side %1 not possible! No position secured!"",_side] call ALiVE_fnc_DumpR};" \n
                         "    };" \n
                         "    " \n
                         "    [_base,_reinforce,_factions,_side] spawn {" \n
                         "" \n
                         "        _base = _this select 0;" \n
                         "        _reinforce = _this select 1;" \n
                         "        _factions = _this select 2;" \n
                         "        _side = _this select 3;" \n
                         "        _debug = false;" \n
                         "" \n
                         "        // Reinforcement of air assets is handled by ATO" \n
                         "        _reinforce set [4,0]; // air" \n
                         "" \n
                         "        _infantry = if ((_reinforce select 0) > 8) then {8} else {_reinforce select 0};" \n
                         "        _motorized = if ((_reinforce select 1) > 5) then {5} else {_reinforce select 1};" \n
                         "        _mechanized = if ((_reinforce select 2) > 10) then {10} else {_reinforce select 2};" \n
                         "        _armoured = if (((_reinforce select 3) + (_reinforce select 6) + (_reinforce select 7)) > 10) then {10} else {((_reinforce select 3) + (_reinforce select 6) + (_reinforce select 7))};" \n
                         "        _air = if ((_reinforce select 4) > 5) then {5} else {_reinforce select 4};" \n
                         "        " \n
                         "        _position = [_base,""center""] call ALiVE_fnc_HashGet;" \n
                         "        _faction = selectRandom _factions;" \n
                         "" \n
                         "        // Calculate total amount of air vehicles that could be present" \n
                         "        _airAssets = _air + _infantry + _motorized;        " \n
                         "                            " \n
                         "        if (_airAssets > 2) then {" \n
                         "" \n
                         "            // Send regular (non-air-transported) vehicles via convoy first" \n
                         "            _forceMakeup = [" \n
                         "                0,				//infantry" \n
                         "                0,				//motorized" \n
                         "                _mechanized,	//mechanized" \n
                         "                _armoured,		//armoured" \n
                         "                0,				//planes" \n
                         "                0				//helicopters" \n
                         "            ];" \n
                         "" \n
                         "            _event = ['LOGCOM_REQUEST', [_position,_faction,_side,_forceMakeup,""STANDARD""],""OPCOM""] call ALIVE_fnc_event;" \n
                         "            _eventID = [ALIVE_eventLog, ""addEvent"",_event] call ALIVE_fnc_eventLog;            " \n
                         "" \n
                         "            // Then send air transports and reinforced air assets with a 70 seconds delay so they do not crash in each other            " \n
                         "            for ""_i"" from 1 to ceil(_airAssets / 2) do {" \n
                         "" \n
                         "                sleep 10;" \n
                         "" \n
                         "                _forceMakeup = [" \n
                         "                    if (_infantry > 2) then {_infantry = _infantry - 2; 2} else {_infantryTmp = _infantry; _infantry = 0; _infantryTmp}," \n
                         "                    if (_motorized > 2) then {_motorized = _motorized - 2; 2} else {_motorizedTmp = _motorized; _motorized = 0; _motorizedTmp}," \n
                         "                    0," \n
                         "                    0," \n
                         "                    0, // Zero since plane reinforcements are handled by ATO " \n
                         "                    0  // Zero since heli reinforcements are handled by ATO" \n
                         "                ];" \n
                         "" \n
                         "                _event = ['LOGCOM_REQUEST', [_position,_faction,_side,_forceMakeup,""STANDARD""],""OPCOM""] call ALIVE_fnc_event;" \n
                         "                _eventID = [ALIVE_eventLog, ""addEvent"",_event] call ALIVE_fnc_eventLog;" \n
                         "" \n
                         "					 if ((_air + _infantry + _motorized) == 0) exitwith {};" \n
                         "" \n
                         "                sleep 60;" \n
                         "            };" \n
                         "" \n
                         "        } else {" \n
                         "" \n
                         "            _forceMakeup = [" \n
                         "                if ((_reinforce select 0) > 10) then {10} else {_reinforce select 0}," \n
                         "                if ((_reinforce select 1) > 10) then {10} else {_reinforce select 1}," \n
                         "                if ((_reinforce select 2) > 10) then {10} else {_reinforce select 2}," \n
                         "                if (((_reinforce select 3) + (_reinforce select 6) + (_reinforce select 7)) > 10) then {10} else {((_reinforce select 3) + (_reinforce select 6) + (_reinforce select 7))}," \n
                         "                if ((_reinforce select 4) > 10) then {10} else {_reinforce select 4}," \n
                         "                if ((_reinforce select 5) > 10) then {10} else {_reinforce select 5}" \n
                         "            ];" \n
                         "" \n
                         "            _event = ['LOGCOM_REQUEST', [_position,_faction,_side,_forceMakeup,""STANDARD""],""OPCOM""] call ALIVE_fnc_event;" \n
                         "            _eventID = [ALIVE_eventLog, ""addEvent"",_event] call ALIVE_fnc_eventLog;" \n
                         "        };" \n
                         "        " \n
                         "        if (_debug) then {" \n
                         "            {" \n
                         "                private [""_typeReinf""];" \n
                         "            " \n
                         "                _typeReinf = _foreachIndex;" \n
                         "            " \n
                         "                switch (_typeReinf) do {" \n
                         "                    case 0 : {_typeReinf = ""infantry""};" \n
                         "                    case 1 : {_typeReinf = ""motorised""};" \n
                         "                    case 2 : {_typeReinf = ""mechanised""};" \n
                         "                    case 3 : {_typeReinf = ""armour""};" \n
                         "                    case 4 : {_typeReinf = ""air""};" \n
                         "                    case 5 : {_typeReinf = ""sea""};" \n
                         "                    case 6 : {_typeReinf = ""AAA""};" \n
                         "                    case 7 : {_typeReinf = ""Artillery""};" \n
                         "                };" \n
                         "            " \n
                         "                [""ALiVE OPCOM - Requesting reinforcments for side %3 %1x %2 units!"",_x,_typeReinf,_side] call ALiVE_fnc_DumpR;" \n
                         "            } foreach _reinforce;" \n
                         "" \n
                         "				[""ALiVE OPCOM - FORCEMAKEUP DATA %1 | %2 | %3 | %4""," \n
                         "                    _infantry," \n
                         "                    _motorized," \n
                         "                    _mechanized," \n
                         "                    _armoured," \n
                         "                    0," \n
                         "                    0" \n
                         "                ] call ALiVE_fnc_DumpR;" \n
                         "        };" \n
                         "    };" \n
                         "};" \n
                         "" \n
                         "_OPCOM_DATA= [""analyze"",nil]; _reinforce = nil; _busy = false;"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "OPCOM_RECEIVER">*/
                                class OPCOM_RECEIVER
                                {
                                        itemno = 9;
                                        priority = 1.000000;
                                        to="COLLECT_TO_QUEUE";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/"_failsafe = false; _failsafe = (time - _timestamp) > _cycleTime;" \n
                                         ""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"_OPCOM_status = ""waiting for data""; " \n
                                         "" \n
                                         "//See PreCondition and Action for _failsafe and _pause" \n
                                         "(!(isnil ""_OPCOM_DATA"") || {isnil ""_OPCOM_DATA"" && {count _OPCOM_QUEUE > 0}} || {_orderFailed} || {_failsafe}) && {!_pause};"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/"if (_orderFailed || {_failsafe}) then {" \n
                                         "	_orderFailed = false;" \n
                                         "	_failsafe = false;" \n
                                         "	_OPCOM_DATA = [""analyze"",nil];" \n
                                         "};" \n
                                         "" \n
                                         "_busy = false;"/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "PERFORM_POSTANAL">*/
                class PERFORM_POSTANAL
                {
                        name = "PERFORM_POSTANAL";
                        itemno = 33;
                        init = /*%FSM<STATEINIT""">*/"private [""_reinforce""];" \n
                         "" \n
                         "//Analyze Forces State" \n
                         "_startForcesStrength = [_OPCOM_HANDLER,""startForceStrength"",[]] call ALiVE_fnc_HashGet;" \n
                         "_currentForceStrength = [_OPCOM_HANDLER,""currentForceStrength"",[]] call ALiVE_fnc_HashGet;" \n
                         "" \n
                         "_startCount = 0;" \n
                         "_currentCount = 0;" \n
                         "_diff = [];" \n
                         "" \n
                         "if (count _startForcesStrength > 0) then {" \n
                         "  for ""_i"" from 0 to ((count _startForcesStrength)-1) do {" \n
                         "    _startCount = _startCount + (_startForcesStrength select _i);" \n
                         "    _currentCount = _currentCount + (_currentForceStrength select _i);" \n
                         "" \n
                         "    _diff pushback ((_startForcesStrength select _i)-(_currentForceStrength select _i));" \n
                         "  };" \n
                         "" \n
                         "  if ( _currentCount != 0 && _startCount != 0 && [""ALiVE_MIL_LOGISTICS""] call ALiVE_fnc_isModuleAvailable) then {" \n
                         "" \n
                         "    if (_debug) then {" \n
                         "        [""ALiVE OPCOM analysing troops for logistics""] call ALiVE_fnc_DumpR;" \n
                         "        [""Starting Forces: %1"",_startForcesStrength] call ALiVE_fnc_DumpR;" \n
                         "        [""Current Forces: %1"",_currentForceStrength] call ALiVE_fnc_DumpR;" \n
                         "        [""Difference: %1"",_diff] call ALiVE_fnc_DumpR;" \n
                         "        [""Starting Count: %1"",_startCount] call ALiVE_fnc_DumpR;" \n
                         "        [""Current Count: %1"",_currentCount] call ALiVE_fnc_DumpR;" \n
                         "        [""Needed Ratio: %1"",_reinforcementRatio] call ALiVE_fnc_DumpR;" \n
                         "        [""ALiVE OPCOM reinforcements needed: %1"",((_currentCount / _startCount) < _reinforcementRatio)] call ALiVE_fnc_DumpR;" \n
                         "    };" \n
                         "      " \n
                         "    if ((_currentCount / _startCount) < _reinforcementRatio) then {_reinforce = +_diff};" \n
                         "  };" \n
                         "};"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "POST_ANALYSIS_DO">*/
                                class POST_ANALYSIS_DO
                                {
                                        itemno = 34;
                                        priority = 0.000000;
                                        to="RESET";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"true"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "REQUEST_QRF">*/
                class REQUEST_QRF
                {
                        name = "REQUEST_QRF";
                        itemno = 36;
                        init = /*%FSM<STATEINIT""">*/"_OPCOM_status = ""request qrf"";" \n
                         "_timestamp = time;" \n
                         "" \n
                         "private _QRFtype = _qrf select 0;" \n
                         "private _target = _qrf select 1;" \n
                         "private _objectives = [_OPCOM_HANDLER,""objectives"",[]] call ALiVE_fnc_HashGet;" \n
                         "" \n
                         "// Passed Target is an objective" \n
                         "if ({_target == (_x select 2 select 0)} count _objectives > 0) then {" \n
                         "" \n
                         "	private _objective = [_OPCOM_HANDLER,""getobjectivebyid"",_target] call ALiVE_fnc_OPCOM;" \n
                         "	private _center = [_objective,""center""] call ALiVE_fnc_HashGet;" \n
                         "	private _size = [_objective,""size"",100] call ALiVE_fnc_HashGet;" \n
                         "" \n
                         "   // Get objective buildings and filter for ALiVE types" \n
                         "   private _buildings = nearestObjects [_center, [""House_F""], _size];" \n
                         "   {" \n
                         "      private _blg = typeof _x;" \n
                         "      if ( {(tolower _blg) find (tolower _x) != -1} count (ALiVE_militaryBuildingTypes + ALIVE_militaryHQBuildingTypes + ALIVE_civilianPopulationBuildingTypes + ALIVE_militaryParkingBuildingTypes + ALIVE_civilianHQBuildingTypes + ALIVE_civilianCommsBuildingTypes + ALIVE_civilianFuelBuildingTypes) == 0) then {" \n
                         "      	_buildings set [_forEachIndex, -1];" \n
                         "      };" \n
                         "   } foreach _buildings;" \n
                         "   _buildings = _buildings - [-1];" \n
                         "" \n
                         "	if (count _buildings > 0) then {" \n
                         "		private _building = selectRandom _buildings;" \n
                         "" \n
                         "		if ([""ALiVE_mil_ATO""] call ALiVE_fnc_IsModuleAvailable) then {" \n
                         "" \n
                         "			// debug ---------------------------------------" \n
                         "			if(_debug) then { [""OPCOM requesting airstrike on objective %3 building %2!"",_QRFtype,_building,_target] call ALIVE_fnc_dumpR; };" \n
                         "			// debug ---------------------------------------" \n
                         "                    " \n
                         "			// [""Calling ATO event""] call ALiVE_fnc_DumpR;" \n
                         "" \n
                         "			_args = [" \n
                         "				""RED"",	// ROE" \n
                         "				200," \n
                         "				""FULL""," \n
                         "				0.1," \n
                         "				0.1," \n
                         "				2000,		// RADIUS" \n
                         "				10," \n
                         "				[_building]  // TARGETS either profile or unit" \n
                         "			];" \n
                         "			_event = ['ATO_REQUEST', [""Strike"", [_side] call ALiVE_fnc_sideTextToObject, _factions select 0, position _building, _args],""OPCOM""] call ALIVE_fnc_event;" \n
                         "			_eventID = [ALIVE_eventLog, ""addEvent"",_event] call ALIVE_fnc_eventLog;" \n
                         "   		};" \n
                         "	};" \n
                         "" \n
                         "// If not an objective assume its a profile" \n
                         "} else {" \n
                         "" \n
                         "	private _profile = [ALiVE_ProfileHandler,""getProfile"",_target] call ALiVE_fnc_ProfileHandler;" \n
                         "" \n
                         "	if (isnil ""_profile"") exitwith {};" \n
                         "" \n
                         "	private _vehicleIDs = ([_profile,""vehicleAssignments"",[[],[]]] call ALIVE_fnc_hashGet) select 1;" \n
                         "	" \n
                         "	if (count _vehicleIDs > 0) then {" \n
                         "" \n
                         "		private _vehicleID = _vehicleIDs select 0;" \n
                         "		private _profileVehicle = [ALiVE_ProfileHandler,""getProfile"",_vehicleID] call ALiVE_fnc_ProfileHandler;" \n
                         "" \n
                         "		if (!isnil ""_profileVehicle"") then {" \n
                         "" \n
                         "            private _objectType = [_profileVehicle,""objectType"",""""] call ALiVE_fnc_HashGet;" \n
                         "" \n
                         "            switch (_objectType) do {" \n
                         "                case ""Plane"" : {_QRFtype = ""air""};" \n
                         "                case ""Helicopter"" : {_QRFtype = ""air""};" \n
                         "                case ""Tank"" : {_QRFtype = ""air""};" \n
                         "                case ""Car"" : {_QRFtype = ""armored""};" \n
                         "                default {_QRFtype = ""infantry""};" \n
                         "            };" \n
                         "		};" \n
                         "	};" \n
                         "	" \n
                         "	// debug ---------------------------------------" \n
                         "	if(_debug) then { [""OPCOM sending QRF of type %1 on entity %2!"",_QRFtype,_target] call ALIVE_fnc_dumpR; };" \n
                         "	// debug ---------------------------------------" \n
                         "" \n
                         "	_attackers = [_OPCOM_HANDLER, ""attackentity"",[_target,1,_QRFtype]] call ALIVE_fnc_OPCOM;" \n
                         "};" \n
                         "" \n
                         "_OPCOM_DATA= [""analyze"",nil]; _qrf = nil; _busy = false;"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "OPCOM_RECEIVER">*/
                                class OPCOM_RECEIVER
                                {
                                        itemno = 9;
                                        priority = 1.000000;
                                        to="COLLECT_TO_QUEUE";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/"_failsafe = false; _failsafe = (time - _timestamp) > _cycleTime;" \n
                                         ""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"_OPCOM_status = ""waiting for data""; " \n
                                         "" \n
                                         "//See PreCondition and Action for _failsafe and _pause" \n
                                         "(!(isnil ""_OPCOM_DATA"") || {isnil ""_OPCOM_DATA"" && {count _OPCOM_QUEUE > 0}} || {_orderFailed} || {_failsafe}) && {!_pause};"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/"if (_orderFailed || {_failsafe}) then {" \n
                                         "	_orderFailed = false;" \n
                                         "	_failsafe = false;" \n
                                         "	_OPCOM_DATA = [""analyze"",nil];" \n
                                         "};" \n
                                         "" \n
                                         "_busy = false;"/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "REQUEST_RECON">*/
                class REQUEST_RECON
                {
                        name = "REQUEST_RECON";
                        itemno = 38;
                        init = /*%FSM<STATEINIT""">*/"_OPCOM_status = ""request recon"";" \n
                         "_timestamp = time;" \n
                         "" \n
                         "private _RECONtype = _recon select 0;" \n
                         "private _target = _recon select 1;" \n
                         "private _objectives = [_OPCOM_HANDLER,""objectives"",[]] call ALiVE_fnc_HashGet;" \n
                         "" \n
                         "// Passed Target is an objective" \n
                         "if ({_target == (_x select 2 select 0)} count _objectives > 0) then {" \n
                         "" \n
                         "	private _objective = [_OPCOM_HANDLER,""getobjectivebyid"",_target] call ALiVE_fnc_OPCOM;" \n
                         "	private _center = [_objective,""center""] call ALiVE_fnc_HashGet;" \n
                         "	private _size = [_objective,""size"",100] call ALiVE_fnc_HashGet;" \n
                         "" \n
                         "	// Only send recce if enemies are near (OPCOM doesn't know this but avoids sending recce's to friendly territory)" \n
                         "	private _enemyterritory = [_center, _side, 1000, true] call ALIVE_fnc_isEnemyNear;" \n
                         "" \n
                         "	if (_enemyTerritory && _size > 150) then {" \n
                         "		// Get objective buildings and filter for ALiVE types" \n
                         "   		private _buildings = nearestObjects [_center, [""House_F""], _size];" \n
                         "   		{	" \n
                         "			 private _blg = typeof _x;" \n
                         "     			 if ( {(tolower _blg) find (tolower _x) != -1} count (ALiVE_militaryBuildingTypes + ALIVE_militaryHQBuildingTypes + ALIVE_civilianPopulationBuildingTypes + ALIVE_militaryParkingBuildingTypes + ALIVE_civilianHQBuildingTypes + ALIVE_civilianCommsBuildingTypes + ALIVE_civilianFuelBuildingTypes) == 0) then {" \n
                         "      			_buildings set [_forEachIndex, -1];" \n
                         "      		};" \n
                         "   		} foreach _buildings;" \n
                         "   		_buildings = _buildings - [-1];" \n
                         "" \n
                         "		if (count _buildings > 0) then {" \n
                         "			private _building = selectRandom _buildings;" \n
                         "" \n
                         "			if ([""ALiVE_mil_ATO""] call ALiVE_fnc_IsModuleAvailable) then {" \n
                         "" \n
                         "				// debug ---------------------------------------" \n
                         "				if(_debug) then { [""OPCOM requesting recce on objective %3 building %2!"",_RECONtype,_building,_target] call ALIVE_fnc_dumpR; };" \n
                         "				// debug ---------------------------------------" \n
                         "                    " \n
                         "				// [""Calling ATO event""] call ALiVE_fnc_DumpR;" \n
                         "" \n
                         "				waitUntil {[""ALiVE_mil_ATO""] call ALiVE_fnc_isModuleInitialised};" \n
                         "" \n
                         "				_args = [" \n
                         "					""GREEN"",	// ROE" \n
                         "					1200,		// Height" \n
                         "					""NORMAL"", // SPEED" \n
                         "					0.1, 		// Weapon %" \n
                         "					0.75,		// Fuel %" \n
                         "					1000,		// RADIUS" \n
                         "					15,			 // DURATION in mins" \n
                         "					[_building]  // TARGETS either profile or unit" \n
                         "				];" \n
                         "				_event = ['ATO_REQUEST', [""Recce"", [_side] call ALiVE_fnc_sideTextToObject, _factions select 0, position _building, _args],""OPCOM""] call ALIVE_fnc_event;" \n
                         "				_eventID = [ALIVE_eventLog, ""addEvent"",_event] call ALIVE_fnc_eventLog;" \n
                         "   			} else {" \n
                         "				// debug ---------------------------------------" \n
                         "				if(_debug) then { [""OPCOM request for recce on objective %3 building %2 not possible! No ATO available!"",_RECONtype,_building,_target] call ALIVE_fnc_dumpR; };" \n
                         "				// debug ---------------------------------------" \n
                         "			};" \n
                         "		};" \n
                         "	};" \n
                         "};" \n
                         "" \n
                         "_OPCOM_DATA= [""analyze"",nil]; _recon = nil; _busy = false;"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "OPCOM_RECEIVER">*/
                                class OPCOM_RECEIVER
                                {
                                        itemno = 9;
                                        priority = 1.000000;
                                        to="COLLECT_TO_QUEUE";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/"_failsafe = false; _failsafe = (time - _timestamp) > _cycleTime;" \n
                                         ""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"_OPCOM_status = ""waiting for data""; " \n
                                         "" \n
                                         "//See PreCondition and Action for _failsafe and _pause" \n
                                         "(!(isnil ""_OPCOM_DATA"") || {isnil ""_OPCOM_DATA"" && {count _OPCOM_QUEUE > 0}} || {_orderFailed} || {_failsafe}) && {!_pause};"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/"if (_orderFailed || {_failsafe}) then {" \n
                                         "	_orderFailed = false;" \n
                                         "	_failsafe = false;" \n
                                         "	_OPCOM_DATA = [""analyze"",nil];" \n
                                         "};" \n
                                         "" \n
                                         "_busy = false;"/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
                /*%FSM<STATE "REQUEST_OCA">*/
                class REQUEST_OCA
                {
                        name = "REQUEST_OCA";
                        itemno = 40;
                        init = /*%FSM<STATEINIT""">*/"_OPCOM_status = ""request oca"";" \n
                         "_timestamp = time;" \n
                         "" \n
                         "private _OCAtype = _oca select 0;" \n
                         "private _target = _oca select 1;" \n
                         "private _objectives = [_OPCOM_HANDLER,""objectives"",[]] call ALiVE_fnc_HashGet;" \n
                         "" \n
                         "// Passed Target is an objective" \n
                         "if ({_target == (_x select 2 select 0)} count _objectives > 0) then {" \n
                         "" \n
                         "	private _objective = [_OPCOM_HANDLER,""getobjectivebyid"",_target] call ALiVE_fnc_OPCOM;" \n
                         "	private _center = [_objective,""center""] call ALiVE_fnc_HashGet;" \n
                         "	private _size = [_objective,""size"",100] call ALiVE_fnc_HashGet; " \n
                         "" \n
                         "   // Get hangars, radars, atc" \n
                         "   private _buildings = nearestObjects [_center, [""House_F""], _size];" \n
                         "   {" \n
                         "      private _blg = typeof _x;" \n
                         "      if ( {(tolower _blg) find (tolower _x) != -1} count [""hangar"",""radar"",""airport_tower"",""controltower""] == 0) then {" \n
                         "      	_buildings set [_forEachIndex, -1];" \n
                         "      };" \n
                         "   } foreach _buildings;" \n
                         "   _buildings = _buildings - [-1];" \n
                         "" \n
                         "	if (count _buildings > 0) then {" \n
                         "		private _building = selectRandom _buildings;" \n
                         "" \n
                         "		if ([""ALiVE_mil_ATO""] call ALiVE_fnc_IsModuleAvailable) then {" \n
                         "" \n
                         "			// debug ---------------------------------------" \n
                         "			if(_debug) then { [""OPCOM requesting OCA on objective %3 building %2!"",_OCAtype,_building,_target] call ALIVE_fnc_dumpR; };" \n
                         "			// debug ---------------------------------------" \n
                         "                    " \n
                         "			// [""Calling ATO event""] call ALiVE_fnc_DumpR;" \n
                         "" \n
                         "			_args = [" \n
                         "				""RED"",	// ROE" \n
                         "				100,		// Height" \n
                         "				""FULL"", // SPEED" \n
                         "				0.5, 		// Weapon %" \n
                         "				0.5,		// Fuel %" \n
                         "				800,		// RADIUS" \n
                         "				10,			 // DURATION in mins" \n
                         "				_buildings  // TARGETS either profile or unit" \n
                         "			];" \n
                         "			_event = ['ATO_REQUEST', [""OCA"", [_side] call ALiVE_fnc_sideTextToObject, _factions select 0, position _building, _args],""OPCOM""] call ALIVE_fnc_event;" \n
                         "			_eventID = [ALIVE_eventLog, ""addEvent"",_event] call ALIVE_fnc_eventLog;" \n
                         "   	} else {" \n
                         "			// debug ---------------------------------------" \n
                         "			if(_debug) then { [""OPCOM request for OCA on objective %3 building %2 not possible! No ATO available!"",_OCAtype,_building,_target] call ALIVE_fnc_dumpR; };" \n
                         "			// debug ---------------------------------------" \n
                         "		};" \n
                         "	};" \n
                         "};" \n
                         "" \n
                         "_OPCOM_DATA= [""analyze"",nil]; _oca = nil; _busy = false;"/*%FSM</STATEINIT""">*/;
                        precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
                        class Links
                        {
                                /*%FSM<LINK "OPCOM_RECEIVER">*/
                                class OPCOM_RECEIVER
                                {
                                        itemno = 9;
                                        priority = 1.000000;
                                        to="COLLECT_TO_QUEUE";
                                        precondition = /*%FSM<CONDPRECONDITION""">*/"_failsafe = false; _failsafe = (time - _timestamp) > _cycleTime;" \n
                                         ""/*%FSM</CONDPRECONDITION""">*/;
                                        condition=/*%FSM<CONDITION""">*/"_OPCOM_status = ""waiting for data""; " \n
                                         "" \n
                                         "//See PreCondition and Action for _failsafe and _pause" \n
                                         "(!(isnil ""_OPCOM_DATA"") || {isnil ""_OPCOM_DATA"" && {count _OPCOM_QUEUE > 0}} || {_orderFailed} || {_failsafe}) && {!_pause};"/*%FSM</CONDITION""">*/;
                                        action=/*%FSM<ACTION""">*/"if (_orderFailed || {_failsafe}) then {" \n
                                         "	_orderFailed = false;" \n
                                         "	_failsafe = false;" \n
                                         "	_OPCOM_DATA = [""analyze"",nil];" \n
                                         "};" \n
                                         "" \n
                                         "_busy = false;"/*%FSM</ACTION""">*/;
                                };
                                /*%FSM</LINK>*/
                        };
                };
                /*%FSM</STATE>*/
        };
        initState="INIT";
        finalStates[] =
        {
                "END",
        };
};
/*%FSM</COMPILE>*/