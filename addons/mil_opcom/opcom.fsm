/*%FSM<COMPILE "scriptedFSM.cfg, opcom">*/
/*%FSM<HEAD>*/
/*
item0[] = {"INIT",0,250,-717.630066,-1005.371277,-627.630066,-955.371338,0.000000,"INIT"};
item1[] = {"INIT_COMPLETE",4,218,-720.395935,-937.944458,-630.395935,-887.944458,0.000000,"INIT" \n "COMPLETE"};
item2[] = {"ANALYZE",2,250,-915.210754,-306.293610,-417.475098,-258.428986,0.000000,"ANALYZE"};
item3[] = {"OPCOM_FEEDER",4,218,-712.202148,-220.080902,-622.202209,-170.080902,1.000000,"OPCOM" \n "FEEDER"};
item4[] = {"ATTACK_Condition",4,218,-924.627625,-202.879486,-834.627502,-152.879486,5.000000,"ATTACK" \n "Conditions"};
item5[] = {"",7,210,-341.155090,36.380066,-333.155060,44.380096,0.000000,""};
item6[] = {"",7,210,-347.610199,-817.749023,-339.610168,-809.749023,0.000000,""};
item7[] = {"DEFEND_condition",4,218,-787.492737,-203.595917,-697.492737,-153.595917,4.000000,"DEFEND" \n "conditions"};
item8[] = {"RESERVE_conditio",4,218,-642.570801,-201.616302,-552.570740,-151.616302,3.000000,"RESERVE" \n "conditions"};
item9[] = {"OPCOM_RECEIVER",4,218,-717.074463,-838.579346,-627.074646,-788.579346,1.000000,"OPCOM" \n "RECEIVER"};
item10[] = {"CUSTOM_condition",4,218,-502.155029,-201.889679,-412.155121,-151.889679,2.000000,"CUSTOM" \n "conditions"};
item11[] = {"ORDER_TACOM",2,250,-924.860840,-94.510040,-425.593536,-50.306946,0.000000,"ORDER" \n "TACOM"};
item12[] = {"TACOM_CONFIRM",4,218,-651.682068,14.823029,-561.682068,64.823029,0.000000,"TACOM" \n "CONFIRM"};
item13[] = {"TACOM_NOT_CONFIR",4,218,-767.965027,13.736359,-677.965149,63.736359,0.000000,"TACOM" \n "NOT CONFIRM"};
item14[] = {"",7,210,-1031.257935,34.909210,-1023.257385,42.909210,0.000000,""};
item15[] = {"_",-1,250,-433.177032,51.216019,-430.091949,51.216019,0.000000,""};
item16[] = {"",7,210,-1032.922607,-816.473755,-1024.922607,-808.473755,0.000000,""};
item17[] = {"INITIALIZE",2,250,-721.197266,-875.105042,-625.643738,-851.020447,0.000000,"INITIALIZE"};
item18[] = {"NOT_BUSY",2,250,-926.275818,15.184509,-836.275818,65.184509,0.000000,"NOT BUSY"};
item19[] = {"NOT_BUSY_1",2,250,-520.941284,16.271149,-430.941254,66.271149,0.000000,"NOT BUSY"};
item20[] = {"COLLECT_TO_QUEUE",2,250,-712.616882,-579.800415,-622.617004,-529.800415,0.000000,"COLLECT" \n "TO QUEUE"};
item21[] = {"ENTRIES_IN_QUEUE",4,218,-711.509888,-509.729004,-621.509888,-459.728912,0.000000,"ENTRIES" \n "IN QUEUE"};
item22[] = {"ANALYZE_Conditio",4,218,-1203.018188,-310.200287,-1113.017944,-260.200104,0.000000,"ANALYZE" \n "Conditions"};
item23[] = {"PERFORM_ANALYSIS",2,250,-1205.917603,-535.859314,-1115.917603,-485.859314,0.000000,"PERFORM" \n "ANALYSIS"};
item24[] = {"ANALYSIS_DONE",4,218,-1209.427368,-599.538696,-1119.427368,-549.538696,0.000000,"ANALYSIS" \n "DONE"};
item25[] = {"RESET",2,250,-1210.631958,-838.320801,-1120.631958,-788.320801,0.000000,"RESET"};
item26[] = {"PERFORM_CLEANUP",2,250,-1201.964966,-382.972961,-1111.964966,-332.972961,0.000000,"PERFORM" \n "CLEANUP"};
item27[] = {"CLEANUP_DONE",4,218,-1201.899536,-463.712677,-1111.899536,-413.712738,0.000000,"CLEANUP" \n "DONE"};
item28[] = {"EXIT",4,218,-712.073486,100.377136,-622.073486,150.377090,99.000000,"EXIT"};
item29[] = {"END",1,250,-712.089600,226.488464,-622.089539,276.488434,0.000000,"END"};
item30[] = {"REEINFORCE_Condi",4,218,-269.226440,-306.737396,-179.226395,-256.737396,0.000000,"REEINFORCE" \n "Conditions"};
item31[] = {"REQUEST_REEINFOR",2,4346,-269.835327,-838.042908,-179.835312,-788.042908,0.000000,"REQUEST" \n "REEINFORCEMENTS"};
item32[] = {"",7,210,-1164.081909,36.036972,-1156.081909,44.036972,0.000000,""};
item33[] = {"PERFORM_POSTANAL",2,250,-1209.788086,-683.964172,-1119.788086,-633.964172,0.000000,"PERFORM" \n "POSTANALYSIS"};
item34[] = {"POST_ANALYSIS_DO",4,218,-1208.969116,-760.668579,-1118.969116,-710.668579,0.000000,"POST" \n "ANALYSIS" \n "DONE"};
version=1;
class LayoutItems
{
    class Item15
    {
        class ItemInfo
        {
            FontFace="Arial";
            FontHeight=10;
            lStyle=1;
        };
    };
};
link0[] = {0,1};
link1[] = {1,17};
link2[] = {2,3};
link3[] = {2,4};
link4[] = {2,7};
link5[] = {2,8};
link6[] = {2,9};
link7[] = {2,10};
link8[] = {2,22};
link9[] = {2,28};
link10[] = {2,30};
link11[] = {3,2};
link12[] = {4,11};
link13[] = {5,6};
link14[] = {5,28};
link15[] = {6,9};
link16[] = {7,11};
link17[] = {8,11};
link18[] = {9,20};
link19[] = {10,11};
link20[] = {11,12};
link21[] = {11,13};
link22[] = {12,19};
link23[] = {13,18};
link24[] = {14,16};
link25[] = {14,28};
link26[] = {16,9};
link27[] = {17,9};
link28[] = {18,14};
link29[] = {19,5};
link30[] = {20,9};
link31[] = {20,21};
link32[] = {21,2};
link33[] = {22,26};
link34[] = {23,24};
link35[] = {23,32};
link36[] = {24,33};
link37[] = {25,16};
link38[] = {26,27};
link39[] = {27,23};
link40[] = {28,29};
link41[] = {30,31};
link42[] = {31,6};
link43[] = {32,28};
link44[] = {33,34};
link45[] = {34,25};
globals[] = {0.000000,0,0,0,16777215,640,480,1,87,6316128,1,-428.809021,210.125916,-493.463135,-1397.670166,672,951,1};
window[] = {2,-1,-1,-1,-1,1099,150,1930,150,3,690};
*//*%FSM</HEAD>*/
class FSM
{
  fsmName = "opcom";
  class States
  {
    /*%FSM<STATE "INIT">*/
    class INIT
    {
      name = "INIT";
      init = /*%FSM<STATEINIT""">*/"_OPCOM_status = ""PreInit"";" \n
       "" \n
       "_busy = false;" \n
       "_exitFSM = false;" \n
       "" \n
       "_OPCOM_HANDLER = _this select 0;" \n
       "_OBJECTIVES = [_OPCOM_HANDLER,""objectives"",[]] call ALiVE_fnc_HashGet;" \n
       "_OPCOM_FSM =  [_OPCOM_HANDLER,""OPCOM_FSM""] call ALiVE_fnc_HashGet;" \n
       "_TACOM_FSM =  [_OPCOM_HANDLER,""TACOM_FSM""] call ALiVE_fnc_HashGet;" \n
       "" \n
       "_debug = [_OPCOM_HANDLER,""debug"",false] call ALiVE_fnc_HashGet;" \n
       "_side = [_OPCOM_HANDLER,""side"",""EAST""] call ALiVE_fnc_HashGet;" \n
       "_factions = [_OPCOM_HANDLER,""factions"",[""OPF_F""]] call ALiVE_fnc_HashGet;" \n
       "_sidesEnemy = [_OPCOM_HANDLER,""sidesenemy"",[""EAST""]] call ALiVE_fnc_HashGet;" \n
       "_sidesFriendly = [_OPCOM_HANDLER,""sidesfriendly"",[""WEST""]] call ALiVE_fnc_HashGet;" \n
       "_controltype = [_OPCOM_HANDLER, ""controltype"",""invasion""] call ALiVE_fnc_HashGet;" \n
       "_simultanObjectives = [_OPCOM_HANDLER, ""simultanobjectives"",10] call ALiVE_fnc_HashGet;" \n
       "_reinforcementRatio = [_OPCOM_HANDLER, ""reinforcements"",0.9] call ALiVE_fnc_HashGet;" \n
       "" \n
       "_pause = false;" \n
       "" \n
       "_OPCOM_QUEUE = [];" \n
       "_targets = [];" \n
       "_cycleTime = 450;" \n
       "_timestamp = time;" \n
       "_lastanalyze = 0;" \n
       "_orderFailed = false;" \n
       "_colorside = ""ColorRed"";" \n
       "" \n
       "switch (_side) do {" \n
       "    case (""WEST"") : {_colorside = ""ColorBlue""};" \n
       "    case (""EAST"") : {_colorside = ""ColorRed""};" \n
       "    case (""GUER"") : {_colorside = ""ColorGreen""};" \n
       "};" \n
       "" \n
       "// debug ---------------------------------------" \n
       "if(_debug) then {" \n
       "    [ ""OPCOM INIT""] call ALIVE_fnc_dumpR;" \n
       "    //[true] call ALIVE_fnc_timer;" \n
       "};" \n
       "// debug ---------------------------------------" \n
       "" \n
       "/*" \n
       "//Mock targets for testing purposes" \n
       "" \n
       "                        // markers m_0 -  m_15" \n
       "                        _objectives_unsorted = [];" \n
       "                        for ""_i"" from 0 to 15 do {" \n
       "                            _objectives_unsorted pushback [(getmarkerpos format[""m_%1"",_i]),150,""civilian"",25];" \n
       "                        };" \n
       "" \n
       "                        _objectives = [_objectives_unsorted,[],{([_OPCOM_HANDLER,""position""] call ALiVE_fnc_HashGet) distance (_x select 0)},""ASCEND""] call ALiVE_fnc_SortBy;" \n
       "                        " \n
       "                        //Create objectives for OPCOM and set it on the OPCOM Handler " \n
       "                        //GetObjectivesByPriority" \n
       "                        {" \n
       "                                    _target = [nil, ""createhashobject""] call ALIVE_fnc_OPCOM;" \n
       "                        " \n
       "                                    _id = format[""OPCOM_objective_%1_%2"",_side,_foreachIndex]; [_target, ""objectiveID"",_id] call ALIVE_fnc_HashSet;" \n
       "                                    _pos = _x select 0; [_target, ""center"",_pos] call ALIVE_fnc_HashSet;" \n
       "                                    _size = _x select 1; [_target, ""size"",_size] call ALIVE_fnc_HashSet;" \n
       "                                    _type = _x select 2; [_target, ""objectiveType"",_type] call ALIVE_fnc_HashSet;" \n
       "                                    _priority = _x select 3; [_target, ""priority"",_priority] call ALIVE_fnc_HashSet;" \n
       "                                    _opcom_state = ""unassigned""; [_target, ""opcom_state"",_opcom_state] call ALIVE_fnc_HashSet;" \n
       "                        " \n
       "                                    if  (_debug) then {" \n
       "                                        _m = createMarkerLocal [_id, _pos];" \n
       "                                        _m setMarkerShapeLocal ""RECTANGLE"";" \n
       "                                        _m setMarkerSizeLocal [_size, _size];" \n
       "                                        _m setMarkerTypeLocal ""hd_dot"";" \n
       "                                        _m setMarkerColorLocal ""ColorWhite"";" \n
       "                                        //_m setMarkerTextLocal format[""Objective Priority %1"",_foreachIndex];" \n
       "                                    };" \n
       "                    " \n
       "                                    _objectives set [_forEachIndex, _target];" \n
       "                         } foreach _objectives;" \n
       "" \n
       "_objectives = [_OPCOM_HANDLER,""objectives"",_objectives] call ALiVE_fnc_OPCOM;" \n
       "*/" \n
       "" \n
       "// debug ---------------------------------------" \n
       "if(_debug) then {" \n
       "    [ ""OPCOM INIT COMPLETE ""] call ALIVE_fnc_dumpR;" \n
       "    [ ""OPCOM Objectives: %1"",_objectives] call ALIVE_fnc_dump;" \n
       "    //_objectives call ALIVE_fnc_inspectHash; // bugged??" \n
       "    //[] call ALIVE_fnc_timer;" \n
       "};" \n
       "// debug ---------------------------------------"/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "INIT_COMPLETE">*/
        class INIT_COMPLETE
        {
          priority = 0.000000;
          to="INITIALIZE";
          precondition = /*%FSM<CONDPRECONDITION""">*/"_OPCOM_FSM =  [_OPCOM_HANDLER,""OPCOM_FSM""] call ALiVE_fnc_HashGet;" \n
           "_TACOM_FSM =  [_OPCOM_HANDLER,""TACOM_FSM""] call ALiVE_fnc_HashGet;"/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"!(isnil ""_OPCOM_FSM"") && !(isnil ""_TACOM_FSM"") && {_OPCOM_FSM > 0 && _TACOM_FSM > 0}"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "ANALYZE">*/
    class ANALYZE
    {
      name = "ANALYZE";
      init = /*%FSM<STATEINIT""">*/"_OPCOM_status = ""switch"";" \n
       "_timestamp = time;" \n
       "" \n
       "private [""_target"",""_obj"",""_attack"",""_defend"",""_reserve"",""_custom"",""_operation"",""_priorities"",""_data_operation"",""_data_value"",""_targetsWithState"",""_OPCOM_ACTION"",""_targetOccupation"",""_analyze"",""_data""];" \n
       "" \n
       "_busy = true;" \n
       "" \n
       "_target = nil;" \n
       "_analyze = nil;" \n
       "_attack = nil;" \n
       "_defend = nil;" \n
       "_reserve = nil;" \n
       "_custom = nil;" \n
       "" \n
       "_data_operation = nil;" \n
       "_data_value = nil;" \n
       "" \n
       "if (count _OPCOM_QUEUE > 0) then {" \n
       "    _OPCOM_ACTION = _OPCOM_QUEUE select 0;" \n
       "    _OPCOM_QUEUE set [0,""x""];" \n
       "    _OPCOM_QUEUE = _OPCOM_QUEUE - [""x""];" \n
       "};" \n
       "" \n
       "_timeout = ((isnil ""_OPCOM_ACTION"") && {(time - _lastAnalyze) >= _cycleTime});" \n
       "if (_timeout) then {_OPCOM_ACTION = [""analyze"",nil]};" \n
       "" \n
       "//start operating if data was received" \n
       "if !(isnil ""_OPCOM_ACTION"") then {" \n
       "    _DATA_OPERATION = _OPCOM_ACTION select 0;" \n
       "    _DATA_VALUE = _OPCOM_ACTION select 1;" \n
       "    _OPCOM_ACTION = nil;" \n
       "" \n
       "    //select operation type" \n
       "    switch (_DATA_OPERATION) do {" \n
       "        case (""init"") : {" \n
       "" \n
       "                    // debug ---------------------------------------" \n
       "                    if (_debug) then {" \n
       "                        [_OPCOM_HANDLER,""OPCOM_monitor"",true] call AliVE_fnc_OPCOM;" \n
       "                    };" \n
       "             // debug ---------------------------------------" \n
       "" \n
       "            _OPCOM_DATA= [""analyze"",nil];" \n
       "" \n
       "            // debug ---------------------------------------" \n
       "            if(_debug) then { [""OPCOM initialized, %1!"",_DATA_VALUE] call ALIVE_fnc_dumpR; };" \n
       "            // debug ---------------------------------------" \n
       "" \n
       "            _busy = false;" \n
       "        };" \n
       "" \n
       "        case (""analyze"") : {" \n
       "            private[""_orders"",""_result"",""_targetsWithState""];" \n
       "" \n
       "            //Check TACOMs Data value (starting attack if you pass nil to it, see below)" \n
       "            if !(isnil ""_DATA_VALUE"") then {" \n
       "                switch (_DATA_VALUE) do {" \n
       "                    case (""no groups available"") : {};" \n
       "                    case (""analysis""): {_analyze = ""analysis""};" \n
       "                    default {};" \n
       "                };" \n
       "            };" \n
       "" \n
       "            //AnalyzeClusterOccupation" \n
       "            _targetOccupation = [_OPCOM_HANDLER,""clusteroccupation"",[]] call ALiVE_fnc_HashGet;" \n
       "            if (((count _targetOccupation > 0) && {time - (_targetOccupation select 4) > _cycleTime}) || {count _targetOccupation == 0}) then {_analyze = ""analysis""};" \n
       "" \n
       "            //Exit if analysis should happen" \n
       "            if !(isnil ""_analyze"") exitwith {_busy = false};" \n
       "" \n
       "            //Exit if reeinforcements need to be requested" \n
       "            if !(isnil ""_reinforce"") exitwith {_busy = false};" \n
       "" \n
       "            //Get objectives" \n
       "            _obj = ([_OPCOM_HANDLER,""objectives"",[]] call AliVE_fnc_HashGet);" \n
       "" \n
       "            _targetsTaken = _targetOccupation select 0;" \n
       "            _targetsAttacked = _targetOccupation select 1;" \n
       "            _targetsTakenEnemy = _targetOccupation select 2;" \n
       "            _targetsAttackedEnemy = _targetOccupation select 3;" \n
       "" \n
       "                        _un = [];" \n
       "                        _at = [];" \n
       "                        _def = [];" \n
       "                        _res = [];" \n
       "                        _idl = [];" \n
       "                        _active = 0;" \n
       "" \n
       "                        {" \n
       "                            private [""_state""];" \n
       "" \n
       "                            _state = _x select 2 select 5;" \n
       "" \n
       "                            switch (_state) do {" \n
       "                                case (""unassigned"") : {_un pushback _x};" \n
       "                                case (""attack"") : {_at pushback _x};" \n
       "                                case (""defend"") : {_def pushback _x};" \n
       "                                case (""reserve"") : {_res pushback _x};" \n
       "                                case (""idle"") : {_idl pushback _x};" \n
       "                            };" \n
       "" \n
       "                            if (_state in [""attacking"",""defending""]) then {_active = _active + 1};" \n
       "                        } foreach _obj;" \n
       "" \n
       "            //AnalyzeResults - prepare orders" \n
       "" \n
       "                switch (_controltype) do {" \n
       "                    case (""invasion"") : {" \n
       "" \n
       "                        _priorities = [" \n
       "                            [(count _res > 0),_targetsTaken,""reserve""]," \n
       "                            [(count _un > 0),[],""unassigned""]," \n
       "                            [(count _at > 0) && (_active <= _simultanObjectives),_targetsTakenEnemy,""attack""]," \n
       "                            [(count _def > 0),_targetsAttacked,""defend""]" \n
       "                        ];" \n
       "                    };" \n
       "        " \n
       "                    case (""occupation"") : {" \n
       "                        _priorities = [" \n
       "                            [(count _res > 0),_targetsTaken,""reserve""]," \n
       "                            [(count _def > 0),_targetsAttacked,""defend""]," \n
       "                            [(count _at > 0),_targetsTakenEnemy,""attack""]," \n
       "                            [(count _un > 0),[],""unassigned""]" \n
       "                        ];" \n
       "                    };" \n
       "                };" \n
       "" \n
       "                        {" \n
       "                            if (_x select 0) exitwith {" \n
       "                                _targetsWithState = (_x select 2);" \n
       "                            };" \n
       "                        } foreach _priorities;" \n
       "" \n
       "            //Select orders and execute" \n
       "                        if !(isnil ""_targetsWithState"") then {" \n
       "                    _orders = [_OPCOM_HANDLER,""selectordersbystate"",_targetsWithState] call ALiVE_fnc_OPCOM;" \n
       "                    " \n
       "                    if !(isnil ""_orders"") then {" \n
       "                        private [""_o""];" \n
       "" \n
       "                        _o = _orders select 1;" \n
       "                        _operation = [_o,""opcom_orders""] call AliVE_fnc_HashGet;" \n
       "" \n
       "                        switch (_operation) do {" \n
       "                            case (""attack"") : {" \n
       "                                _attack = _o;" \n
       "                            };" \n
       "                            case (""defend"") : {" \n
       "                                _defend = _o;" \n
       "                            };" \n
       "                            case (""reserve"") : {" \n
       "                                _reserve = _o;" \n
       "                            };" \n
       "                            //Custom" \n
       "                        };" \n
       "                    // debug ---------------------------------------" \n
       "                        if(_debug) then { [""OPCOM orders TACOM to %1 target %2"",([_o,""opcom_orders""] call AliVE_fnc_HashGet),([_o,""objectiveID""] call AliVE_fnc_HashGet)] call ALIVE_fnc_dumpR; };" \n
       "                    // debug ---------------------------------------" \n
       "                    } else {" \n
       "                                _busy = false;" \n
       "                            };" \n
       "                } else {" \n
       "                    _busy = false;" \n
       "                };" \n
       "        };" \n
       "" \n
       "        //Handle TACOM confirmation by state" \n
       "        case (""confirmed"") : {" \n
       "            _confirmed = _DATA_VALUE select 0;" \n
       "            _information = _DATA_VALUE select 1;" \n
       "            _target = _information select 0;" \n
       "            _return = _information select 1;" \n
       "            _operation = [_target,""opcom_orders""] call AliVE_fnc_HashGet;" \n
       "            _pos = [_target,""center""] call AliVE_fnc_HashGet;" \n
       "" \n
       "            if (_confirmed) then {" \n
       "                switch (_operation) do {" \n
       "                    case (""attack"") : {" \n
       "                        [_target,""opcom_state"",""attacking""] call AliVE_fnc_HashSet;" \n
       "                    };" \n
       "                    case (""defend"") : {" \n
       "                        [_target,""opcom_state"",""defending""] call AliVE_fnc_HashSet;" \n
       "                    };" \n
       "                    case (""reserve"") : {" \n
       "                        [_target,""opcom_state"",""reserving""] call AliVE_fnc_HashSet;" \n
       "                    };" \n
       "                    default {};" \n
       "                };" \n
       "                " \n
       "                //Trigger new OPCOM analysis after TACOM confirmation including TACOMs answer" \n
       "                _OPCOM_DATA = [""analyze"",nil];" \n
       "" \n
       "                // debug ---------------------------------------" \n
       "                if(_debug) then { [""TACOM message received: %1 %2! Details: %3!"",([_target,""opcom_state""] call AliVE_fnc_HashGet),([_target,""objectiveID""] call AliVE_fnc_HashGet),_return] call ALIVE_fnc_dumpR; };" \n
       "                // debug ---------------------------------------" \n
       "" \n
       "            }  else {" \n
       "                [_target,""opcom_orders"",""none""] call ALiVE_fnc_HashSet;" \n
       "" \n
       "                // debug ---------------------------------------" \n
       "                if(_debug) then { [""TACOM message received: %1"",_return] call ALIVE_fnc_dumpR; };" \n
       "                // debug ---------------------------------------" \n
       "" \n
       "            };" \n
       "            _busy = false;" \n
       "        };" \n
       "" \n
       "        case (""custom"") : {_custom = _DATA_VALUE};" \n
       "        default {};" \n
       "    };" \n
       "" \n
       "};" \n
       "" \n
       "_lastAnalyze = time;"/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "EXIT">*/
        class EXIT
        {
          priority = 99.000000;
          to="END";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"_exitFSM"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
        /*%FSM<LINK "ATTACK_Condition">*/
        class ATTACK_Condition
        {
          priority = 5.000000;
          to="ORDER_TACOM";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"!(isnil ""_attack"");"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
        /*%FSM<LINK "DEFEND_condition">*/
        class DEFEND_condition
        {
          priority = 4.000000;
          to="ORDER_TACOM";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"!(isnil ""_defend"");"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
        /*%FSM<LINK "RESERVE_conditio">*/
        class RESERVE_conditio
        {
          priority = 3.000000;
          to="ORDER_TACOM";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"!(isnil ""_reserve"");"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
        /*%FSM<LINK "CUSTOM_condition">*/
        class CUSTOM_condition
        {
          priority = 2.000000;
          to="ORDER_TACOM";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"!(isnil ""_custom"");"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
        /*%FSM<LINK "OPCOM_FEEDER">*/
        class OPCOM_FEEDER
        {
          priority = 1.000000;
          to="ANALYZE";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"time - _lastAnalyze > _cycleTime"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
        /*%FSM<LINK "OPCOM_RECEIVER">*/
        class OPCOM_RECEIVER
        {
          priority = 1.000000;
          to="COLLECT_TO_QUEUE";
          precondition = /*%FSM<CONDPRECONDITION""">*/"_failsafe = false; _failsafe = (time - _timestamp) > _cycleTime;" \n
           ""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"_OPCOM_status = ""waiting for data""; " \n
           "" \n
           "//See PreCondition and Action for _failsafe and _pause" \n
           "(!(isnil ""_OPCOM_DATA"") || {_orderFailed} || {_failsafe}) && {!_pause};"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/"if (_orderFailed || {_failsafe}) then {_orderFailed = false; _failsafe = false; _OPCOM_DATA= [""analyze"",nil]};"/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
        /*%FSM<LINK "REEINFORCE_Condi">*/
        class REEINFORCE_Condi
        {
          priority = 0.000000;
          to="REQUEST_REEINFOR";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"!(isnil ""_reinforce"");"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
        /*%FSM<LINK "ANALYZE_Conditio">*/
        class ANALYZE_Conditio
        {
          priority = 0.000000;
          to="PERFORM_CLEANUP";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"!(isnil ""_analyze"");"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "ORDER_TACOM">*/
    class ORDER_TACOM
    {
      name = "ORDER_TACOM";
      init = /*%FSM<STATEINIT""">*/"_OPCOM_status = ""order"";" \n
       "_timestamp = time;" \n
       "" \n
       "_operation = nil;" \n
       "" \n
       "//prepare transmission" \n
       "if !(isnil ""_attack"") then {_operation = ""attack""};" \n
       "if !(isnil ""_defend"") then {_operation = ""defend""};" \n
       "if !(isnil ""_reserve"") then {_operation = ""reserve""};" \n
       "if !(isnil ""_custom"") then {_operation = ""custom""};" \n
       "" \n
       "//transmit" \n
       "switch (_operation) do {" \n
       "        case ( ""attack"") : {    _TACOM_FSM setFSMVariable [""_TACOM_DATA"",[""analyze"",_attack]];};" \n
       "        case (""defend"") : {_TACOM_FSM setFSMVariable [""_TACOM_DATA"",[""analyze"",_defend]];};" \n
       "        case (""reserve"") : {_TACOM_FSM setFSMVariable [""_TACOM_DATA"",[""analyze"",_reserve]];};" \n
       "        case (""custom"") : {};" \n
       "        default {};" \n
       "};"/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "TACOM_NOT_CONFIR">*/
        class TACOM_NOT_CONFIR
        {
          priority = 0.000000;
          to="NOT_BUSY";
          precondition = /*%FSM<CONDPRECONDITION""">*/"_orderFailed = false; _orderFailed = (time - _timestamp) > 10;"/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"(!(isnil ""_OPCOM_DATA"") && {(_OPCOM_DATA select 0) == ""confirmed""} && {!((_OPCOM_DATA select 1) select 0)}) || {_orderFailed}"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
        /*%FSM<LINK "TACOM_CONFIRM">*/
        class TACOM_CONFIRM
        {
          priority = 0.000000;
          to="NOT_BUSY_1";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"!(isnil ""_OPCOM_DATA"") && {(_OPCOM_DATA select 0) == ""confirmed""} && {(_OPCOM_DATA select 1) select 0};"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "INITIALIZE">*/
    class INITIALIZE
    {
      name = "INITIALIZE";
      init = /*%FSM<STATEINIT""">*/"_OPCOM_status = ""Init"";" \n
       "" \n
       "_OPCOM_DATA = [""init"",true];"/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "OPCOM_RECEIVER">*/
        class OPCOM_RECEIVER
        {
          priority = 1.000000;
          to="COLLECT_TO_QUEUE";
          precondition = /*%FSM<CONDPRECONDITION""">*/"_failsafe = false; _failsafe = (time - _timestamp) > _cycleTime;" \n
           ""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"_OPCOM_status = ""waiting for data""; " \n
           "" \n
           "//See PreCondition and Action for _failsafe and _pause" \n
           "(!(isnil ""_OPCOM_DATA"") || {_orderFailed} || {_failsafe}) && {!_pause};"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/"if (_orderFailed || {_failsafe}) then {_orderFailed = false; _failsafe = false; _OPCOM_DATA= [""analyze"",nil]};"/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "NOT_BUSY">*/
    class NOT_BUSY
    {
      name = "NOT_BUSY";
      init = /*%FSM<STATEINIT""">*/"_OPCOM_status = ""reset"";" \n
       "_timestamp = time;" \n
       "" \n
       "_busy = false;"/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "EXIT">*/
        class EXIT
        {
          priority = 99.000000;
          to="END";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"_exitFSM"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
        /*%FSM<LINK "OPCOM_RECEIVER">*/
        class OPCOM_RECEIVER
        {
          priority = 1.000000;
          to="COLLECT_TO_QUEUE";
          precondition = /*%FSM<CONDPRECONDITION""">*/"_failsafe = false; _failsafe = (time - _timestamp) > _cycleTime;" \n
           ""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"_OPCOM_status = ""waiting for data""; " \n
           "" \n
           "//See PreCondition and Action for _failsafe and _pause" \n
           "(!(isnil ""_OPCOM_DATA"") || {_orderFailed} || {_failsafe}) && {!_pause};"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/"if (_orderFailed || {_failsafe}) then {_orderFailed = false; _failsafe = false; _OPCOM_DATA= [""analyze"",nil]};"/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "NOT_BUSY_1">*/
    class NOT_BUSY_1
    {
      name = "NOT_BUSY_1";
      init = /*%FSM<STATEINIT""">*/"_OPCOM_status = ""reset"";" \n
       "_timestamp = time;" \n
       "" \n
       "_busy = false;"/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "EXIT">*/
        class EXIT
        {
          priority = 99.000000;
          to="END";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"_exitFSM"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
        /*%FSM<LINK "OPCOM_RECEIVER">*/
        class OPCOM_RECEIVER
        {
          priority = 1.000000;
          to="COLLECT_TO_QUEUE";
          precondition = /*%FSM<CONDPRECONDITION""">*/"_failsafe = false; _failsafe = (time - _timestamp) > _cycleTime;" \n
           ""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"_OPCOM_status = ""waiting for data""; " \n
           "" \n
           "//See PreCondition and Action for _failsafe and _pause" \n
           "(!(isnil ""_OPCOM_DATA"") || {_orderFailed} || {_failsafe}) && {!_pause};"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/"if (_orderFailed || {_failsafe}) then {_orderFailed = false; _failsafe = false; _OPCOM_DATA= [""analyze"",nil]};"/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "COLLECT_TO_QUEUE">*/
    class COLLECT_TO_QUEUE
    {
      name = "COLLECT_TO_QUEUE";
      init = /*%FSM<STATEINIT""">*/"_OPCOM_status = ""collect data to queue"";" \n
       "_timestamp = time;" \n
       "" \n
       "_OPCOM_QUEUE pushback _OPCOM_DATA;" \n
       "_OPCOM_DATA = nil;"/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "OPCOM_RECEIVER">*/
        class OPCOM_RECEIVER
        {
          priority = 1.000000;
          to="COLLECT_TO_QUEUE";
          precondition = /*%FSM<CONDPRECONDITION""">*/"_failsafe = false; _failsafe = (time - _timestamp) > _cycleTime;" \n
           ""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"_OPCOM_status = ""waiting for data""; " \n
           "" \n
           "//See PreCondition and Action for _failsafe and _pause" \n
           "(!(isnil ""_OPCOM_DATA"") || {_orderFailed} || {_failsafe}) && {!_pause};"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/"if (_orderFailed || {_failsafe}) then {_orderFailed = false; _failsafe = false; _OPCOM_DATA= [""analyze"",nil]};"/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
        /*%FSM<LINK "ENTRIES_IN_QUEUE">*/
        class ENTRIES_IN_QUEUE
        {
          priority = 0.000000;
          to="ANALYZE";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"((count _OPCOM_QUEUE > 0) || time - _lastAnalyze > _cycleTime) && ((time - _lastAnalyze > 0.5) && !(_busy))"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "PERFORM_ANALYSIS">*/
    class PERFORM_ANALYSIS
    {
      name = "PERFORM_ANALYSIS";
      init = /*%FSM<STATEINIT""">*/"private [""_clusterOccupationAnalysis"",""_troopsAnalysis"",""_enemyScan""];" \n
       "" \n
       "switch (_analyze) do {" \n
       "    case (""analysis"") : {" \n
       "        //ANALYSISDONE = false; [_OPCOM_HANDLER,_sidesFriendly,_sidesEnemy] execFSM ""\x\alive\addons\mil_opcom\analyze.fsm"";" \n
       "        _clusterOccupationAnalysis = [_OPCOM_HANDLER,_side,_sidesEnemy,_sidesFriendly] spawn {[_this select 0,""analyzeclusteroccupation"",[_this select 3,_this select 2]] call ALiVE_fnc_OPCOM};" \n
       "        _troopsAnalysis = [_OPCOM_HANDLER] spawn {[_this select 0,""scantroops""] call ALiVE_fnc_OPCOM};" \n
       "        _enemyScan = [_OPCOM_HANDLER,_factions] spawn {" \n
       "            private [""_profiles"",""_pos""];" \n
       "" \n
       "            _profiles = [];" \n
       "            {" \n
       "                _profiles = _profiles + ([ALiVE_ProfileHandler,""getProfilesByFaction"",_x] call ALiVE_fnc_ProfileHandler);" \n
       "            } foreach (_this select 1);" \n
       "            {" \n
       "                _pos = [([ALiVE_ProfileHandler,""getProfile"",_x] call ALiVE_fnc_ProfileHandler),""position""] call ALiVE_fnc_HashGet;" \n
       "                if !(isnil ""_pos"") then {_visibleEnemies = [_this select 0,""scanenemies"",_pos] call ALiVE_fnc_OPCOM};" \n
       "            } foreach _profiles;" \n
       "        };" \n
       "    };" \n
       "};"/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "EXIT">*/
        class EXIT
        {
          priority = 99.000000;
          to="END";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"_exitFSM"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
        /*%FSM<LINK "ANALYSIS_DONE">*/
        class ANALYSIS_DONE
        {
          priority = 0.000000;
          to="PERFORM_POSTANAL";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"scriptdone _troopsAnalysis && " \n
           "scriptdone _clusterOccupationAnalysis && " \n
           "scriptdone _enemyScan"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "RESET">*/
    class RESET
    {
      name = "RESET";
      init = /*%FSM<STATEINIT""">*/"_OPCOM_status = ""reset"";" \n
       "_timestamp = time;" \n
       "" \n
       "// debug ---------------------------------------" \n
       "            if(_debug) then {" \n
       "                [""OPCOM analysis finished""] call ALIVE_fnc_dump;" \n
       "                [] call ALIVE_fnc_timer;" \n
       "                [""---------------------""] call ALIVE_fnc_dump;" \n
       "" \n
       "                private [""_obj""];" \n
       "                _obj = [_OPCOM_HANDLER,""objectives"",[]] call ALiVE_fnc_HashGet;" \n
       "" \n
       "                     [""ALiVE OPCOM %9 analyzed: Total of %1 targets | unassigned: %2 | assigned: %3 | completed: %4 | defending: %5 | secured: %6 | internal: %7 | others: %8""," \n
       "                         count _obj," \n
       "                        ({([_x,""opcom_state""] call AliVE_fnc_HashGet) == ""unassigned""} count _obj), " \n
       "                        ({([_x,""opcom_state""] call AliVE_fnc_HashGet) == ""attacking""} count _obj)," \n
       "                        ({([_x,""opcom_state""] call AliVE_fnc_HashGet) == ""reserving""} count _obj)," \n
       "                        ({([_x,""opcom_state""] call AliVE_fnc_HashGet) == ""defending""} count _obj)," \n
       "                        ({([_x,""opcom_state""] call AliVE_fnc_HashGet) == ""idle""} count _obj)," \n
       "                        ({([_x,""opcom_state""] call AliVE_fnc_HashGet) == ""internal""} count _obj)," \n
       "                        ({!(([_x,""opcom_state""] call AliVE_fnc_HashGet) in [""internal"",""idle"",""defending"",""reserving"",""attacking"",""unassigned""])} count _obj)," \n
       "                        _side" \n
       "                    ] call ALIVE_fnc_dumpR; " \n
       "                };" \n
       "// debug ---------------------------------------" \n
       "" \n
       "_OPCOM_DATA= [""analyze"",nil]; _busy = false;"/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "OPCOM_RECEIVER">*/
        class OPCOM_RECEIVER
        {
          priority = 1.000000;
          to="COLLECT_TO_QUEUE";
          precondition = /*%FSM<CONDPRECONDITION""">*/"_failsafe = false; _failsafe = (time - _timestamp) > _cycleTime;" \n
           ""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"_OPCOM_status = ""waiting for data""; " \n
           "" \n
           "//See PreCondition and Action for _failsafe and _pause" \n
           "(!(isnil ""_OPCOM_DATA"") || {_orderFailed} || {_failsafe}) && {!_pause};"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/"if (_orderFailed || {_failsafe}) then {_orderFailed = false; _failsafe = false; _OPCOM_DATA= [""analyze"",nil]};"/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "PERFORM_CLEANUP">*/
    class PERFORM_CLEANUP
    {
      name = "PERFORM_CLEANUP";
      init = /*%FSM<STATEINIT""">*/"_OPCOM_status = ""analysis"";" \n
       "" \n
       "// debug ---------------------------------------" \n
       "            if(_debug) then {" \n
       "                [""---------------------""] call ALIVE_fnc_dump;" \n
       "                [""OPCOM analysis started""] call ALIVE_fnc_dumpR;" \n
       "                [true] call ALIVE_fnc_timer;" \n
       "            };" \n
       "// debug ---------------------------------------    " \n
       "" \n
       "private [""_cleanup""];" \n
       "" \n
       "_cleanup = [_OPCOM_HANDLER] spawn {[_this select 0,""cleanupduplicatesections""] call ALiVE_fnc_OPCOM};"/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "CLEANUP_DONE">*/
        class CLEANUP_DONE
        {
          priority = 0.000000;
          to="PERFORM_ANALYSIS";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"scriptdone _cleanup;"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "END">*/
    class END
    {
      name = "END";
      init = /*%FSM<STATEINIT""">*/"[_OPCOM_HANDLER,""OPCOM_FSM""] call ALiVE_fnc_HashRem;"/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "REQUEST_REEINFOR">*/
    class REQUEST_REEINFOR
    {
      name = "REQUEST_REEINFOR";
      init = /*%FSM<STATEINIT""">*/"_OPCOM_status = ""reinforce"";" \n
       "_timestamp = time;" \n
       "" \n
       "if ([""ALiVE_MIL_LOGISTICS""] call ALiVE_fnc_isModuleAvailable) then {" \n
       "" \n
       "    private [""_position"",""_forceMakeup"",""_forceMakeupAir"",""_event"",""_eventID"",""_base""];" \n
       "" \n
       "    _base = [_OPCOM_HANDLER,""findReinforcementBase""] call ALiVE_fnc_OPCOM;" \n
       "" \n
       "    if (isnil ""_base"") exitwith {" \n
       "            if (_debug) then {[""ALiVE OPCOM - Requesting reinforcments for side %1 not possible! No position secured!"",_side] call ALiVE_fnc_DumpR};" \n
       "        };" \n
       "" \n
       "    _position = [_base,""center""] call ALiVE_fnc_HashGet;" \n
       "    _faction = (selectRandom _factions);" \n
       "" \n
       "    //Limiting to not drop 100s of troops at once" \n
       "    _forceMakeup = [" \n
       "        if ((_reinforce select 0) > 10) then {10} else {_reinforce select 0}, // infantry" \n
       "        if ((_reinforce select 1) > 10) then {10} else {_reinforce select 1}, // motorised" \n
       "        if ((_reinforce select 2) > 10) then {10} else {_reinforce select 2}, // mechanised" \n
       "        if ((_reinforce select 3) > 10) then {10} else {_reinforce select 3}, // armour" \n
       "        if ((_reinforce select 4) > 10) then {10} else {_reinforce select 4}, // plane" \n
       "        if ((_reinforce select 5) > 10) then {10} else {_reinforce select 5}  // heli" \n
       "    ];" \n
       "" \n
       "    _event = ['LOGCOM_REQUEST', [_position,_faction,_side,_forceMakeup,""STANDARD""],""OPCOM""] call ALIVE_fnc_event;" \n
       "    _eventID = [ALIVE_eventLog, ""addEvent"",_event] call ALIVE_fnc_eventLog;" \n
       "" \n
       "    if (_debug) then {" \n
       "        {" \n
       "            private [""_typeReinf""];" \n
       "        " \n
       "            _typeReinf = _foreachIndex;" \n
       "        " \n
       "            switch (_typeReinf) do {" \n
       "                case 0 : {_typeReinf = ""infantry""};" \n
       "                case 1 : {_typeReinf = ""motorised""};" \n
       "                case 2 : {_typeReinf = ""mechanised""};" \n
       "                case 3 : {_typeReinf= ""armour""};" \n
       "                case 4 : {_typeReinf = ""plane""};" \n
       "                case 5 : {_typeReinf = ""heli""};" \n
       "                case 6 : {_typeReinf = ""AAA""};" \n
       "                case 7 : {_typeReinf = ""Artillery""};" \n
       "            };" \n
       "        " \n
       "            [""ALiVE OPCOM - Requesting reinforcments for side %3 %1x %2 units!"",_x,_typeReinf,_side] call ALiVE_fnc_DumpR;" \n
       "        } foreach _reinforce;" \n
       "    };" \n
       "};" \n
       "" \n
       "_OPCOM_DATA= [""analyze"",nil]; _reinforce = nil; _busy = false;"/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "OPCOM_RECEIVER">*/
        class OPCOM_RECEIVER
        {
          priority = 1.000000;
          to="COLLECT_TO_QUEUE";
          precondition = /*%FSM<CONDPRECONDITION""">*/"_failsafe = false; _failsafe = (time - _timestamp) > _cycleTime;" \n
           ""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"_OPCOM_status = ""waiting for data""; " \n
           "" \n
           "//See PreCondition and Action for _failsafe and _pause" \n
           "(!(isnil ""_OPCOM_DATA"") || {_orderFailed} || {_failsafe}) && {!_pause};"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/"if (_orderFailed || {_failsafe}) then {_orderFailed = false; _failsafe = false; _OPCOM_DATA= [""analyze"",nil]};"/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "PERFORM_POSTANAL">*/
    class PERFORM_POSTANAL
    {
      name = "PERFORM_POSTANAL";
      init = /*%FSM<STATEINIT""">*/"private [""_reinforce""];" \n
       "" \n
       "//Analyze Forces State" \n
       "_startForcesStrength = [_OPCOM_HANDLER,""startForceStrength"",[]] call ALiVE_fnc_HashGet;" \n
       "_currentForceStrength = [_OPCOM_HANDLER,""currentForceStrength"",[]] call ALiVE_fnc_HashGet;" \n
       "" \n
       "_startCount = 0;" \n
       "_currentCount = 0;" \n
       "_diff = [];" \n
       "" \n
       "if (count _startForcesStrength > 0) then {" \n
       "  for ""_i"" from 0 to ((count _startForcesStrength)-1) do {" \n
       "    _startCount = _startCount + (_startForcesStrength select _i);" \n
       "    _currentCount = _currentCount + (_currentForceStrength select _i);" \n
       "" \n
       "    _diff pushback ((_startForcesStrength select _i)-(_currentForceStrength select _i));" \n
       "  };" \n
       "" \n
       "  if ( _currentCount != 0 && _startCount != 0 && [""ALiVE_MIL_LOGISTICS""] call ALiVE_fnc_isModuleAvailable) then {" \n
       "" \n
       "    if (_debug) then {" \n
       "        [""ALiVE OPCOM analysing troops for logistics""] call ALiVE_fnc_DumpR;" \n
       "        [""Starting Forces: %1"",_startForcesStrength] call ALiVE_fnc_DumpR;" \n
       "        [""Current Forces: %1"",_currentForceStrength] call ALiVE_fnc_DumpR;" \n
       "        [""Difference: %1"",_diff] call ALiVE_fnc_DumpR;" \n
       "        [""Starting Count: %1"",_startCount] call ALiVE_fnc_DumpR;" \n
       "        [""Current Count: %1"",_currentCount] call ALiVE_fnc_DumpR;" \n
       "        [""Needed Ratio: %1"",_reinforcementRatio] call ALiVE_fnc_DumpR;" \n
       "        [""ALiVE OPCOM reinforcements needed: %1"",((_currentCount / _startCount) < _reinforcementRatio)] call ALiVE_fnc_DumpR;" \n
       "    };" \n
       "      " \n
       "    if ((_currentCount / _startCount) < _reinforcementRatio) then {_reinforce = +_diff};" \n
       "  };" \n
       "};"/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "POST_ANALYSIS_DO">*/
        class POST_ANALYSIS_DO
        {
          priority = 0.000000;
          to="RESET";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"true"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
  };
  initState="INIT";
  finalStates[] =
  {
    "END"
  };
};
/*%FSM</COMPILE>*/
